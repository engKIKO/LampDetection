/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.04.2025 19:43:56

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 11291, -16826, -14788, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.0002477940870448947, 0.00022171743330545723, 0.00021918692800682038, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 92,74,119,-66,-69,2,-14,24,-18,51,23,-16,-34,-72,92,17,-58,75,95,99,-27,-35,27,-84,-127,100,-58,23,71,10,-20,2, 
  /* [1][0][][] */ 55,-37,-71,21,-10,127,-17,-7,122,-47,-4,-86,-65,104,40,-51,93,-45,-31,-96,-112,21,116,72,18,21,3,-12,-68,-52,-4,-26, 
  /* [2][0][][] */ -39,78,-82,72,85,-44,-32,116,94,42,127,-18,-100,-89,75,120,-86,-53,-24,-114,73,119,-54,-89,89,-54,-18,-120,19,-77,88,-22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0036322427913546562, 0.0032500030938535929, 0.0032129101455211639, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 446, -1, 100, -346, 53, 307, -166, 36, 134, -216, 48, 458, -253, -46, -7, -31, 92, -302, 1647, -286, -418, 16, 304, -249, 390, -198, -252, -215, -96, -182, -202, -172, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.281158180674538e-05, 4.0268489101435989e-05, 4.0980528865475208e-05, 4.3655250919982791e-05, 3.9474783989135176e-05, 4.0013281250139698e-05, 4.1188635805156082e-05, 4.1601204429753125e-05, 4.2344243411207572e-05, 4.2494029912631959e-05, 4.1458064515609294e-05, 5.2616051107179374e-05, 4.1587918531149626e-05, 4.0494327549822628e-05, 4.6700097300345078e-05, 4.0577255276730284e-05, 4.3677286157617345e-05, 4.2044055589940399e-05, 5.5006097682053223e-05, 4.0894839912652969e-05, 3.9134029066190124e-05, 4.2910949559882283e-05, 4.9381545977666974e-05, 4.2010051402030513e-05, 4.6833793021505699e-05, 4.1855379095068201e-05, 4.2791431042132899e-05, 4.145061393501237e-05, 4.0473845729138702e-05, 4.0272912883665413e-05, 4.0768667531665415e-05, 4.178061499260366e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -40,-47,108,8,105,-3,-79,-107,56,-92,-101,-8,25,16,-28,59,-44,-23,-86,-52,-70,-95,14,119,-104,13,82,-50,116,7,-18,-83,95,-53,-85,64,-100,-72,-104,30,84,-87,-101,111,58,-104,117,-7,28,-64,-47,109,-76,-45,-87,109,38,66,123,-101,-79,95,-44,42,3,21,81,89,64,88,91,-124,110,-96,61,87,-95,25,-53,21,59,29,96,-15,-54,-36,-83,105,32,127,-15,-125,20,63,39,6, 
  /* [1][0][][] */ -57,36,-79,1,-36,80,42,14,91,-121,-110,119,78,-28,23,73,115,-46,43,106,-50,-5,37,30,39,13,-43,114,12,-6,103,-73,47,106,-13,26,53,63,-8,-65,-67,9,-23,-104,-43,40,-32,-58,-31,-87,124,58,12,79,-99,-71,29,109,65,90,-62,114,-70,-90,-70,39,83,49,104,31,21,14,-120,80,-70,52,87,-51,-42,80,-84,91,-63,-121,31,127,-72,-67,85,84,105,14,91,100,17,-2, 
  /* [2][0][][] */ 48,37,-52,100,-23,-20,92,110,-108,108,-39,118,87,-18,89,-120,-56,-33,44,47,-106,-13,122,23,-28,80,108,30,-64,73,88,91,-66,-24,-66,-113,-81,94,119,-31,-127,-83,11,-2,-91,119,-32,-79,105,37,106,-96,-34,61,24,19,-71,93,-56,4,-24,89,-41,89,96,42,54,90,-106,66,14,-79,37,-81,63,35,-64,-19,5,9,34,-99,0,-49,-1,-104,-24,-42,90,114,-28,-1,-51,-92,-56,-66, 
  /* [3][0][][] */ 74,0,26,-27,-79,38,-115,30,50,9,63,7,93,92,67,6,96,98,-65,14,113,-94,-73,-117,-23,-119,-87,93,35,-100,74,15,-66,-39,-28,-14,-101,-21,34,45,-22,-92,-99,-5,73,27,-42,-89,61,-84,25,-7,83,29,82,-105,-121,-118,-118,-64,-97,20,-34,56,52,-29,-68,-34,-36,-76,-6,98,11,-112,47,-59,28,87,91,-61,-87,-127,25,89,26,45,-46,-108,-85,44,0,-100,90,-93,-91,29, 
  /* [4][0][][] */ 63,119,-12,59,-19,-30,38,16,73,82,-3,66,49,-34,-14,-63,-22,3,-79,-2,126,-96,96,32,-14,-4,73,-75,-50,46,-76,-49,65,127,-1,-103,-51,0,-120,59,-47,-59,-73,-94,39,121,46,64,26,-36,-28,-79,-99,54,-119,6,47,-90,-2,22,17,-98,-34,-88,-44,69,4,-35,32,-102,-95,-80,-52,0,101,60,73,-22,-4,-54,14,-44,-118,-15,6,82,106,12,-120,-77,57,57,39,115,-107,-19, 
  /* [5][0][][] */ 97,-91,84,83,33,-127,35,45,119,-123,4,-82,0,113,44,46,73,74,-94,117,40,61,24,-23,-105,-59,-12,-107,50,45,21,-96,-33,10,-88,24,-117,-30,19,26,-87,-49,50,109,-28,33,45,-48,-108,109,9,43,35,26,45,-17,120,50,-60,-38,39,-73,43,-82,-24,116,-24,22,91,8,106,-75,-51,91,-20,-78,24,-46,18,91,123,44,32,122,-80,91,1,50,82,-97,115,105,-16,33,86,-92, 
  /* [6][0][][] */ 16,-50,122,79,-89,-51,-3,70,-17,-76,5,-93,87,56,120,-125,43,-1,4,101,-84,-123,114,61,-65,-87,-9,-51,-26,-123,49,-84,-91,-127,-33,-112,-8,38,-113,82,87,57,22,-17,-119,107,-95,-48,-88,19,-27,-70,65,-60,99,-29,7,-11,-61,116,-102,14,67,-70,-56,66,105,-52,79,-9,-110,-7,57,-74,-89,-42,-87,-105,-60,-32,32,-30,48,-30,-76,-92,-44,-102,85,96,98,15,-57,-70,75,-30, 
  /* [7][0][][] */ 125,75,-47,-43,-68,106,-18,-2,126,-10,-97,22,67,-88,46,81,54,21,-2,93,60,37,-6,91,-69,105,44,50,-81,113,-23,42,14,26,53,105,-111,93,-9,-25,102,-75,92,72,53,0,111,-115,54,-54,-120,-70,-29,90,-1,22,123,-87,-5,-56,11,-23,85,-127,-73,-52,71,28,-112,25,71,93,90,9,47,61,-63,56,-100,51,99,-36,-28,-72,93,38,-109,103,88,8,95,71,-53,-40,-3,-67, 
  /* [8][0][][] */ 14,39,-51,-92,65,13,-72,-28,12,32,49,103,8,-39,-83,-68,-66,103,-74,28,38,-23,85,115,-114,100,50,64,-70,31,-92,127,93,-28,29,2,120,10,-26,76,88,110,-106,-117,-5,-23,-16,113,24,-90,-75,4,-70,-2,-28,-106,55,116,-103,110,120,30,48,100,-26,-39,-20,103,-78,59,36,5,80,74,10,22,-39,110,88,79,43,85,-118,-81,31,47,81,-34,44,-33,-82,110,-75,-96,-41,62, 
  /* [9][0][][] */ 2,3,110,41,90,-118,-52,-127,38,46,-14,60,-19,-81,-109,-22,11,-2,-92,-75,6,99,-111,-111,115,-15,-10,31,-4,-66,-94,95,55,-6,29,-24,-75,11,-39,-43,44,-69,55,-101,75,16,-110,55,46,-6,-78,-54,82,-83,-76,100,93,-52,-6,0,-93,113,85,-65,-93,0,105,51,-41,105,116,-85,14,75,-105,-97,-85,-122,-42,100,31,34,106,24,-49,-94,40,-20,103,28,-24,105,107,-4,56,-29, 
  /* [10][0][][] */ -61,89,88,-68,-11,92,114,27,45,16,27,-65,112,88,-37,16,-37,87,-103,-85,-16,30,59,-71,36,56,-120,-127,-52,86,-102,-80,77,104,109,77,-44,10,-35,39,-33,124,-113,-39,-99,-57,1,-61,-3,6,33,11,60,23,-83,-45,-102,-11,21,-45,0,66,119,32,120,-74,-100,-20,22,-19,-95,-65,91,53,-100,112,-12,65,72,27,85,1,48,112,-102,75,108,-20,40,11,0,-67,-51,-49,-47,-68, 
  /* [11][0][][] */ 103,13,-1,88,125,81,55,33,93,89,-56,118,12,-58,31,-44,-19,-80,87,72,34,73,33,-78,-85,-69,5,84,105,25,35,-19,-54,-58,66,39,-29,62,-12,-36,-19,92,-58,17,-32,-45,-75,-60,73,116,127,81,-41,-77,31,28,-27,-41,16,-58,-39,109,89,48,49,73,-33,37,118,50,-33,-49,63,85,-52,54,-46,42,-26,72,-82,0,-31,-32,46,-48,18,-24,-64,-1,22,-85,-42,-14,-58,-21, 
  /* [12][0][][] */ 8,64,-58,-4,84,7,-43,33,-86,58,-21,7,-54,6,44,-88,-109,-41,-47,-92,20,-16,12,94,-75,-57,96,-103,90,5,-43,112,-91,-78,-43,10,-9,-84,-22,38,111,34,-122,-47,-28,-93,-48,115,-51,-127,-80,100,35,-5,-91,83,-27,-69,61,63,53,119,-11,58,109,26,-53,116,51,97,37,67,81,115,-19,-10,-44,31,-126,-102,-68,103,46,8,-44,27,49,110,-104,-119,90,37,98,-23,22,75, 
  /* [13][0][][] */ 104,-63,106,92,92,103,83,50,74,-111,10,-38,84,75,76,-54,-125,-67,-84,46,70,-32,124,-53,-70,53,4,9,-102,-79,90,53,55,121,-38,41,-92,-21,12,68,-63,80,-57,10,-36,32,3,-33,43,97,-58,-100,-116,44,115,-78,-53,24,-41,-82,-29,110,-86,8,-46,-65,-103,84,-26,-15,96,-7,-104,51,-69,-52,-101,69,83,-71,58,-107,96,22,-86,-113,97,127,-10,-44,-88,69,119,-51,83,-13, 
  /* [14][0][][] */ -66,-84,77,60,51,-42,-15,-108,-70,-31,67,58,-38,-87,-82,-76,-51,-50,-8,29,-39,29,-3,56,-99,-60,-35,13,-124,-104,-71,42,92,-15,-44,11,84,115,31,-104,1,-101,41,84,68,-96,67,-77,106,20,67,53,73,-7,-10,15,-57,0,31,85,-15,-88,-24,44,-79,-5,68,-112,-78,-77,-94,82,-4,82,29,-75,54,-102,50,37,47,-28,-127,-32,-103,-85,-98,105,101,15,73,-44,68,97,-7,56, 
  /* [15][0][][] */ 26,-23,-36,83,107,-98,69,-99,70,-16,-70,21,127,7,-98,-111,96,14,-91,9,57,23,78,119,89,68,46,96,26,57,67,-104,-8,6,-74,-3,-71,122,122,-64,21,125,-46,-23,24,-78,-40,-83,-10,-75,0,31,-103,-111,-70,-25,76,64,-56,122,-42,-82,7,104,-40,110,-72,11,-67,12,73,-70,24,-32,46,-110,0,59,116,90,-81,66,-121,-59,-124,-32,-91,48,95,75,-109,-44,65,122,-121,124, 
  /* [16][0][][] */ -75,6,102,-65,36,112,-52,27,46,54,-105,65,-23,-45,-42,-60,111,86,62,80,112,79,-35,53,-31,67,-65,57,-101,31,44,27,-88,88,48,66,-30,63,-60,-71,28,-44,74,92,74,106,107,-9,-47,-113,-8,119,-43,127,77,56,29,86,68,13,116,110,34,59,68,17,-36,85,58,99,-33,-11,29,103,78,83,-1,101,-107,-12,18,-81,62,12,15,98,102,13,80,25,-19,123,70,-25,-69,22, 
  /* [17][0][][] */ 31,-119,27,79,-50,-122,-74,-104,38,-95,81,45,96,57,-124,45,27,49,102,109,-102,-19,9,-59,20,63,-86,23,103,-62,-38,72,-37,-30,29,0,-55,97,-94,-36,-104,-48,-22,-16,1,7,81,-119,82,101,-19,20,-24,74,96,-82,-127,83,-91,-121,27,-101,70,97,-95,-82,39,-110,-120,-10,107,24,11,-127,-75,63,113,-55,38,-67,5,-21,-84,-101,-122,69,77,-41,14,73,-106,-127,-19,91,7,9, 
  /* [18][0][][] */ -32,93,126,-11,-7,-43,-43,47,22,100,-46,-9,-47,51,89,-17,55,-16,85,-30,83,4,55,-21,60,-46,23,127,62,10,39,43,56,4,-40,-80,15,46,17,83,-11,23,-10,36,-55,41,20,32,42,3,98,56,-42,-8,40,103,-40,4,23,-62,59,126,19,60,-51,-76,17,105,58,-38,-36,87,-54,1,-53,-40,56,83,35,-48,-28,21,16,-27,115,8,72,27,-75,-29,-21,61,83,-6,60,17, 
  /* [19][0][][] */ 17,28,77,38,59,-90,98,94,95,-67,27,-14,-101,32,-60,60,74,-112,113,56,-26,81,-60,11,77,-86,28,-72,-97,-125,-70,45,81,-89,34,-4,7,-75,-59,-107,44,-123,-89,8,-92,28,77,-100,-32,37,-43,45,-38,12,5,-13,22,100,-3,-31,55,-58,102,64,-75,-5,-30,-4,-12,54,76,-55,-67,-127,-60,-86,-27,-120,13,108,58,-121,-34,79,-93,-10,6,-7,91,28,-7,64,-37,116,70,-52, 
  /* [20][0][][] */ 0,72,71,110,-81,95,19,70,20,6,-97,15,14,96,37,-78,-62,-46,-61,-43,25,-53,-89,-83,79,-87,-116,58,25,4,-51,115,100,41,-15,57,39,-42,-6,-111,-98,-37,-100,-119,-36,-76,-82,108,60,-122,-96,33,52,114,50,-6,99,88,104,99,124,-71,-71,-32,-39,-77,-57,27,-102,-83,-70,93,-67,-99,21,25,109,78,119,119,88,11,84,-31,58,127,-16,77,19,96,43,65,29,21,-13,10, 
  /* [21][0][][] */ 94,79,58,-105,102,-95,74,5,1,-82,-71,47,13,40,-55,-87,-104,-26,22,-16,111,-50,70,-83,58,-90,-33,60,11,9,-15,-16,-6,20,-110,-113,108,100,-127,-31,-4,10,31,-16,-98,-81,-76,92,-25,-64,-16,86,29,71,-111,15,-48,57,-64,121,58,-93,15,-27,81,35,-38,-69,-105,-1,62,82,34,-38,61,64,-108,-32,63,108,17,100,22,-70,26,-94,67,-78,-101,79,112,-110,-42,-67,65,-32, 
  /* [22][0][][] */ 28,-42,-55,-86,73,-45,104,35,-79,79,-59,-90,72,-91,-90,-70,41,82,-127,-40,83,-57,34,36,87,7,-91,88,-41,-58,-52,-86,50,61,13,16,10,-6,-82,-99,9,-4,8,89,58,-95,87,-12,-48,-62,-13,-5,-65,-73,-31,41,-9,-30,-15,-23,98,-59,-63,-104,-51,24,-92,-45,109,98,-23,3,-59,18,65,-78,54,-39,63,84,101,-86,-57,-97,77,79,91,-21,-42,37,-62,61,22,25,-20,89, 
  /* [23][0][][] */ 56,-98,0,51,91,-116,-4,-111,49,-79,79,67,7,-117,12,-49,83,-42,-120,109,85,-91,99,-43,-23,-20,76,14,62,46,65,-45,-37,39,13,28,92,-14,-121,-3,-116,-8,0,-119,-76,-101,108,19,74,-126,-100,-59,76,-62,-50,94,-92,-30,91,39,-124,-101,-63,-17,29,30,-127,-121,58,-25,107,-83,-14,-28,-37,-105,40,-29,88,113,-63,-60,12,-115,88,-1,107,-31,-102,36,99,-10,98,-63,-32,78, 
  /* [24][0][][] */ -66,-28,-113,-78,-60,-122,-43,-114,85,80,97,59,127,77,-50,-85,-62,69,27,-32,118,-66,-39,-23,46,-14,77,49,104,61,-5,-45,26,27,37,42,-42,-54,19,6,-42,-64,100,-6,25,-23,68,77,-43,-29,-37,19,66,80,49,-86,17,108,30,27,114,-16,61,79,-70,118,-35,-64,-92,50,-31,10,-13,16,87,100,73,-60,-76,-53,-46,-74,-68,-90,15,81,12,-56,52,-86,38,-57,6,22,-80,18, 
  /* [25][0][][] */ -98,-69,-86,-15,88,-67,-112,53,40,-106,-46,8,64,-8,-118,-29,-78,48,25,-110,61,82,-16,-64,8,-58,-116,30,73,-96,39,113,86,-123,40,61,98,-74,-27,-27,-95,91,-117,1,92,36,54,31,-116,82,-79,1,46,-40,-68,13,-27,46,-108,72,114,54,41,41,11,71,-23,-13,-87,-12,-27,-125,30,-118,81,17,71,72,9,4,42,44,-24,80,-84,-60,-112,-101,-29,-41,96,18,-127,0,1,-85, 
  /* [26][0][][] */ 52,-116,-31,-19,-99,-11,-14,-21,-110,-127,104,84,-77,-48,5,-17,113,32,-85,-46,15,68,99,10,51,60,9,39,8,8,-98,-3,-19,-60,-109,-97,-67,85,-57,107,-100,102,55,29,-74,72,-41,101,-20,26,-10,97,6,-42,-15,-112,101,68,40,25,5,-103,66,-28,122,-21,-60,53,-86,78,88,97,82,-95,-73,4,44,-109,-100,13,-29,77,78,-78,77,-1,-45,13,-82,113,9,20,-56,111,50,83, 
  /* [27][0][][] */ 11,5,-64,-107,-127,-70,-74,-19,41,100,36,-115,-31,56,82,-34,64,-20,78,-89,-99,9,-32,-27,-111,44,-114,1,65,26,-35,-14,66,69,-85,-93,-97,-70,-118,89,-101,15,25,14,99,22,67,104,91,69,62,-81,-95,-91,-9,-34,102,-29,-114,-84,-61,-66,-38,74,38,-52,-118,107,47,7,-125,5,61,-53,-9,-93,44,-70,88,103,84,-29,122,-61,-80,-88,-37,28,-53,-7,-39,-56,55,14,86,56, 
  /* [28][0][][] */ 100,-4,92,45,-121,-57,-106,-73,-40,-96,61,101,-85,-88,3,112,97,112,-76,77,-34,23,-116,-83,-119,86,-93,-39,-38,-81,9,-21,-117,14,82,75,20,-117,-18,29,107,43,-96,55,-116,-9,13,47,19,-66,-72,-33,-66,21,51,39,55,-12,108,56,11,-27,-108,42,62,77,-25,82,-70,39,-113,-48,75,36,-7,-106,-127,-69,-95,48,-82,-91,127,-30,65,-123,69,-87,-117,-75,-42,-68,-31,52,-99,-59, 
  /* [29][0][][] */ 55,54,66,-55,-95,29,-127,14,101,-5,-97,-104,108,-113,-52,-52,-106,104,37,-75,-84,-37,58,4,-39,6,-48,-18,-106,-14,113,-8,60,-1,-66,-60,-10,105,-4,98,48,110,-51,87,-3,109,-61,-28,18,-10,73,-102,83,-109,119,49,-103,56,-43,113,-127,118,-102,-40,-67,-71,55,93,98,-94,35,-80,118,81,69,28,117,-66,-34,33,-10,-88,-3,-85,65,120,44,78,-43,100,72,81,-112,15,-5,65, 
  /* [30][0][][] */ 23,-73,-70,32,-104,25,-74,-18,115,-17,-7,-44,-106,12,55,10,-7,32,97,-108,40,-112,-122,10,-119,21,-77,121,-14,-114,-99,4,-88,-80,-126,-59,15,-23,-8,19,88,-86,-18,101,103,-50,102,58,-78,79,18,-109,99,-60,-14,101,-86,-58,-86,-61,-111,-3,-80,-29,-114,-96,-105,90,-66,112,49,-39,-94,106,40,-94,-62,-78,-85,-68,27,27,-111,-25,-116,25,-119,110,-41,-127,78,56,-38,-5,5,-77, 
  /* [31][0][][] */ 82,-98,41,104,51,77,-61,-103,-33,-19,-83,-90,102,-127,-49,113,-62,-95,80,48,64,38,-31,110,44,-118,38,52,-70,-78,49,110,19,20,-64,-10,101,-34,-71,-116,60,-72,-34,32,3,-58,-43,25,72,31,98,-32,-111,-61,-83,24,-123,68,36,117,-41,31,86,-69,70,114,-45,-82,73,-126,-123,9,-100,-45,15,8,-62,-47,51,92,-80,-44,59,73,57,98,-100,16,17,-55,-91,-58,11,105,-6,-24, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001819492201320827, 0.001711410703137517, 0.0017416725168004632, 0.0018553481204435229, 0.0016776783159002662, 0.0017005644040182233, 0.0017505169380456209, 0.0017680511809885502, 0.00179963035043329, 0.0018059962894767523, 0.0017619677819311619, 0.002236182102933526, 0.0017674865666776896, 0.0017210089135915041, 0.0019847541116178036, 0.0017245332710444927, 0.0018562845652922988, 0.0017868722788989544, 0.0023377591278403997, 0.0017380306962877512, 0.0016631961334496737, 0.0018237152835354209, 0.0020987156312912703, 0.0017854270990937948, 0.0019904361106455326, 0.0017788535915315151, 0.0018186357337981462, 0.0017616511322557926, 0.0017201383598148823, 0.0017115988302975893, 0.0017326683737337589, 0.0017756760353222489, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1868, 3780, 9372, 2238, -2710, -3813, 14682, 1677, 2198, -1688, 9915, -248, -6065, 1927, 11204, 5831, 12698, 4766, -3523, -4254, 3920, 32440, 19349, 14642, 756, 868, 3684, 2977, 2070, -4465, 6134, -2210, -287, 4785, -2, 919, 10087, 4650, -1294, 4762, 7047, 5253, 4360, 9141, 3221, 3736, 1609, 7056, 3868, -5487, -4147, 392, -253, -1338, 1661, -15, 172, -983, -3305, 7132, -785, 1373, -1084, -1178, -3348, 7325, 20964, 1878, -1670, 702, 1321, 1998, 1619, -995, 501, 6819, -478, 15858, 13031, -887, 7387, 1803, -330, 1035, 12600, 7733, 4284, 1360, 4944, 3367, -389, -6604, 545, -1864, -1473, -1665, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033843470737338066, 0.00041477812919765711, 0.00025464539066888392, 0.00039061132702045143, 0.00039464308065362275, 0.00039365043630823493, 0.00022653971973340958, 0.00042590146767906845, 0.00027850351762026548, 0.00037238886579871178, 0.00019964625244028866, 0.00026115190121345222, 0.00041763408808037639, 0.0014598062261939049, 0.00027574985870160162, 0.00019632841576822102, 0.00014752060815226287, 0.00030555875855498016, 0.00054930488113313913, 0.0003952153492718935, 0.00015942798927426338, 8.3265826106071472e-05, 0.00015894602984189987, 0.00011501109838718548, 0.00024116024724207819, 0.00056437158491462469, 0.00080913829151540995, 0.0003643591480795294, 0.00024621526245027781, 0.00044085722765885293, 0.00023972481722012162, 0.00034990700078196824, 0.00026289094239473343, 0.00024293041497003287, 0.00031078621395863593, 0.00027346512069925666, 0.00018869338964577764, 0.00023247514036484063, 0.0004316591948736459, 0.00037386122858151793, 0.00017914881755132228, 0.00049344985745847225, 0.00034961826168000698, 0.00025428901426494122, 0.00059578241780400276, 0.00026999207329936326, 0.00031894183484837413, 0.00030402420088648796, 0.00034580475767143071, 0.00023992190835997462, 0.00037264180718921125, 0.00023006666742730886, 0.00057774211745709181, 0.00022368459030985832, 0.00048081210115924478, 0.00042038483661599457, 0.00059311976656317711, 0.00027397193480283022, 0.00046073479461483657, 0.00025729925255291164, 0.00092350167687982321, 0.00049886823398992419, 0.00024627460516057909, 0.00067064730683341622, 0.00055685144616290927, 0.00026196165708824992, 0.00010350170487072319, 0.00021059146092738956, 0.00069247349165380001, 0.00047104927944019437, 0.00028829375514760613, 0.00025388546055182815, 0.00082411122275516391, 0.00040801713475957513, 0.00033426118898205459, 0.00031780192512087524, 0.00030162493931129575, 0.00011864206317113712, 0.00014012490282766521, 0.00020604743622243404, 0.00019988264830317348, 0.00018502939201425761, 0.00025442548212595284, 0.00023136462550610304, 0.00014537014067173004, 0.00030749151483178139, 0.00054946419550105929, 0.00020915995992254466, 0.00014473726332653314, 0.00060582871083170176, 0.00027829167083837092, 0.00029604148585349321, 0.00038451884756796062, 0.00056396686704829335, 0.00042663977365009487, 0.00024803337873890996, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -33,80,-2,-127,-47,-33,-28,-72,-29,24,-3,68,14,-61,0,41, 
  /* [1][0][][] */ -37,28,-64,-9,-34,-33,32,-80,60,58,-64,26,-4,11,35,-127, 
  /* [2][0][][] */ 5,-3,-26,50,54,29,-66,-77,127,-36,11,-2,-11,92,-69,8, 
  /* [3][0][][] */ 51,-57,9,-100,15,-21,-15,4,116,-5,81,51,-1,49,9,127, 
  /* [4][0][][] */ -79,51,19,48,11,-11,-2,33,0,17,28,-38,-127,-20,-14,24, 
  /* [5][0][][] */ 3,78,120,1,23,78,-77,75,-58,74,-30,-38,32,-43,-127,24, 
  /* [6][0][][] */ 32,-61,111,-127,31,-5,-32,95,-81,-86,38,-54,-7,85,-18,71, 
  /* [7][0][][] */ 42,113,-18,-51,93,17,-1,-47,127,93,-24,23,31,-21,54,46, 
  /* [8][0][][] */ 7,-94,6,-93,18,-63,27,-71,17,67,66,-18,10,127,86,53, 
  /* [9][0][][] */ 13,-25,-7,127,40,-5,43,-55,-58,109,24,-16,-2,-59,-12,-6, 
  /* [10][0][][] */ -18,11,-54,-127,4,3,-13,35,32,-37,20,-41,-11,-51,12,26, 
  /* [11][0][][] */ -4,9,18,-25,75,-38,92,-55,-93,40,-12,25,-9,127,-63,-36, 
  /* [12][0][][] */ 46,-7,-107,-25,25,-79,35,32,-1,37,-59,-51,-46,127,-5,20, 
  /* [13][0][][] */ -14,3,-19,8,7,-127,-1,19,2,-13,11,-6,8,-9,10,13, 
  /* [14][0][][] */ 31,-16,91,-23,65,14,-127,-77,-7,-40,40,31,17,-54,-26,-22, 
  /* [15][0][][] */ -73,46,-8,-50,14,33,127,52,-28,44,124,-38,49,101,70,18, 
  /* [16][0][][] */ 11,53,127,88,4,24,86,59,-98,27,-72,-19,8,2,1,-87, 
  /* [17][0][][] */ -40,-107,-10,26,-56,-19,-52,11,-127,-24,9,-50,-7,34,54,-41, 
  /* [18][0][][] */ 4,44,0,71,42,6,18,-1,77,44,-32,-27,18,127,64,18, 
  /* [19][0][][] */ 1,-34,28,3,85,6,-79,-69,-102,-66,-37,-127,-46,-50,12,-47, 
  /* [20][0][][] */ 81,-48,-53,-41,4,-127,24,18,-66,28,-93,-34,9,-1,31,-15, 
  /* [21][0][][] */ 99,-31,111,-7,-2,11,-23,104,-17,-127,113,20,16,121,75,107, 
  /* [22][0][][] */ -33,32,-46,127,-66,-2,107,79,-21,49,-29,21,-14,1,38,-11, 
  /* [23][0][][] */ 69,-14,115,-117,58,-25,5,57,-7,44,-18,-55,-8,-34,-127,15, 
  /* [24][0][][] */ -127,45,15,-20,4,105,29,-17,2,21,99,-2,-82,23,53,-25, 
  /* [25][0][][] */ 23,21,11,19,8,5,71,-55,-10,-127,-17,-24,-15,-31,16,16, 
  /* [26][0][][] */ -33,1,1,10,-46,-6,-41,-33,-103,-36,4,-29,14,127,-39,57, 
  /* [27][0][][] */ -6,27,11,62,36,-31,-14,-36,52,6,-27,-4,3,127,-12,13, 
  /* [28][0][][] */ 20,75,59,63,127,3,20,31,-73,-22,-32,-18,23,90,31,-21, 
  /* [29][0][][] */ -3,-3,5,12,26,-4,12,42,-24,-8,-19,-127,-6,-10,-17,7, 
  /* [30][0][][] */ -17,91,-47,82,-36,-14,39,-127,-39,59,-7,5,66,33,76,95, 
  /* [31][0][][] */ -29,-15,-15,-61,-2,4,-53,-106,27,72,-9,-127,-25,-47,0,27, 
  /* [32][0][][] */ -127,-79,-6,55,52,34,-6,10,-10,-40,-109,35,66,10,61,70, 
  /* [33][0][][] */ -16,-45,-36,-12,-91,-15,-72,2,54,19,3,-55,22,-108,127,23, 
  /* [34][0][][] */ 47,-8,65,22,47,15,-39,76,-85,-46,64,13,11,-3,-15,127, 
  /* [35][0][][] */ -44,44,-66,12,-14,-28,30,-118,73,78,-77,-7,-4,-7,87,-127, 
  /* [36][0][][] */ -40,32,7,111,29,12,127,30,-24,48,-38,-25,-25,41,-64,-60, 
  /* [37][0][][] */ -1,-5,9,-81,-11,-11,-31,-47,-89,-4,-11,-10,-5,-127,57,-41, 
  /* [38][0][][] */ 36,114,-37,-69,127,-14,57,-46,119,107,-33,20,26,-47,70,-6, 
  /* [39][0][][] */ -38,58,-10,-127,-17,11,-47,31,46,-76,-23,-27,19,65,55,31, 
  /* [40][0][][] */ 8,-27,32,-86,21,-2,-4,-36,-127,-9,-3,-44,-5,-105,73,-75, 
  /* [41][0][][] */ -11,-21,-36,-22,1,-36,25,-13,-36,16,-45,-16,-127,12,30,29, 
  /* [42][0][][] */ 127,78,-32,-14,-75,-46,-25,-58,0,24,84,-64,-52,38,107,-113, 
  /* [43][0][][] */ -5,96,-58,7,66,-7,88,-42,52,70,-30,-3,37,-127,-69,-46, 
  /* [44][0][][] */ -30,-18,11,-42,60,3,-84,-127,-31,-6,5,-4,2,-35,72,-64, 
  /* [45][0][][] */ -4,50,-127,-28,27,-56,17,-75,18,36,12,-61,35,-34,52,-14, 
  /* [46][0][][] */ 10,-6,-9,-82,-5,15,16,-32,-120,-24,8,4,-9,-127,63,-35, 
  /* [47][0][][] */ 13,42,17,-23,123,-26,-23,19,-68,35,-6,15,1,3,127,-33, 
  /* [48][0][][] */ -127,-68,-19,33,68,14,16,-16,9,-13,-111,52,57,15,68,58, 
  /* [49][0][][] */ 21,15,102,83,127,5,38,32,-111,-51,-33,-73,18,108,14,-59, 
  /* [50][0][][] */ 44,0,-109,-1,35,-127,-57,-9,-6,-19,-5,-16,48,-37,-37,25, 
  /* [51][0][][] */ 1,21,35,4,19,-9,0,21,-127,45,9,-119,6,-103,-10,72, 
  /* [52][0][][] */ 10,66,8,60,59,11,17,21,78,81,-19,-46,43,127,57,29, 
  /* [53][0][][] */ -11,-58,-10,-22,-92,-15,-71,4,40,26,6,-71,22,-117,127,10, 
  /* [54][0][][] */ 54,-20,-46,14,120,84,-127,-55,-79,-19,-32,-82,-1,-65,-11,-42, 
  /* [55][0][][] */ 56,-2,7,7,45,-38,-82,-127,-29,-80,-59,21,2,-25,14,1, 
  /* [56][0][][] */ -21,9,20,-24,-10,-29,-87,63,-14,127,-9,-19,23,7,0,2, 
  /* [57][0][][] */ 0,17,-44,-19,-55,-51,122,95,-39,31,-18,-5,26,23,127,-11, 
  /* [58][0][][] */ 50,35,-127,36,93,102,-48,54,-91,-54,10,21,-38,28,-3,-16, 
  /* [59][0][][] */ -91,66,104,15,-77,-68,127,119,17,3,20,-13,7,19,64,1, 
  /* [60][0][][] */ 4,-14,-51,-6,18,-127,-15,-5,-21,-9,-12,-39,23,-23,13,1, 
  /* [61][0][][] */ 24,0,24,127,74,26,23,5,-88,-3,21,48,-4,12,29,-48, 
  /* [62][0][][] */ -56,127,16,-55,-38,-17,-63,61,-31,-55,-99,-73,-16,-96,-52,-48, 
  /* [63][0][][] */ -42,24,-22,127,-74,18,-71,-36,-59,-25,-16,-38,30,58,32,39, 
  /* [64][0][][] */ 6,-1,-5,43,-3,4,-13,67,26,7,-19,-35,-8,-127,54,-6, 
  /* [65][0][][] */ -19,-54,11,-127,44,-30,64,-33,-25,59,0,-126,-15,-3,25,-56, 
  /* [66][0][][] */ 50,-4,47,-12,5,20,4,121,28,-65,49,60,22,127,0,97, 
  /* [67][0][][] */ 4,57,-11,-127,-8,2,-66,30,91,-105,-22,-5,36,80,79,42, 
  /* [68][0][][] */ -28,32,127,15,15,7,-10,-4,-37,-22,-12,-34,18,-25,85,-31, 
  /* [69][0][][] */ 127,70,-13,2,-85,-30,-33,-48,0,14,84,-69,-61,48,70,-102, 
  /* [70][0][][] */ 41,7,-50,-6,-23,29,48,127,-29,90,-32,8,16,55,-26,16, 
  /* [71][0][][] */ 6,0,-4,5,5,-81,4,23,-32,14,-69,8,-127,3,34,47, 
  /* [72][0][][] */ 6,15,-127,6,3,5,36,101,-42,-22,1,-10,16,21,-7,1, 
  /* [73][0][][] */ -51,17,38,0,42,-36,-68,-127,12,-68,30,-25,9,-50,45,-23, 
  /* [74][0][][] */ -6,22,36,123,12,-16,-77,92,-82,26,-62,32,11,-127,44,-104, 
  /* [75][0][][] */ -19,19,-57,4,0,-16,28,-8,101,30,-32,-12,3,127,-28,-8, 
  /* [76][0][][] */ 4,-9,2,24,8,-8,-18,68,22,-35,-23,-127,-4,-2,3,19, 
  /* [77][0][][] */ -20,22,-22,127,-62,13,95,112,1,51,-18,25,-26,-24,-4,-23, 
  /* [78][0][][] */ -2,-8,24,-127,40,-41,-26,41,13,-40,-3,-60,14,121,24,36, 
  /* [79][0][][] */ -23,-108,-75,-68,-95,-12,32,-82,127,24,21,47,11,52,48,-60, 
  /* [80][0][][] */ -40,-20,91,-82,5,-21,24,-69,-69,51,-39,-127,13,74,74,-49, 
  /* [81][0][][] */ -49,41,-127,23,64,-127,-10,59,-9,-43,57,-7,21,10,13,-7, 
  /* [82][0][][] */ 127,-12,-2,19,15,-110,-25,17,-12,-14,-98,3,107,-3,-6,28, 
  /* [83][0][][] */ -31,68,-111,-74,-29,-11,38,-123,66,44,-33,-127,20,41,55,100, 
  /* [84][0][][] */ -34,46,66,-39,21,-31,64,-127,-31,48,-16,-44,31,55,41,5, 
  /* [85][0][][] */ -85,122,28,-127,-74,-35,-21,-6,-62,-5,-71,12,-2,-5,-90,-40, 
  /* [86][0][][] */ -12,-2,-36,1,-35,-31,127,20,-5,-26,-6,-2,9,25,94,-27, 
  /* [87][0][][] */ -22,-34,-4,-115,12,-37,46,-19,1,13,-4,-127,-13,-5,15,-35, 
  /* [88][0][][] */ 94,-35,41,-19,19,-127,15,39,-69,46,-110,-82,31,38,84,-7, 
  /* [89][0][][] */ 29,-14,-42,-53,27,-16,-22,-5,-47,10,36,-53,127,0,23,-35, 
  /* [90][0][][] */ 1,-48,42,-60,70,-1,-72,96,66,-90,-34,-20,-10,127,17,-123, 
  /* [91][0][][] */ -38,-14,-19,-37,14,-9,-32,-92,5,51,-5,-127,-29,-21,9,4, 
  /* [92][0][][] */ -21,25,45,20,5,-127,9,-1,5,-29,8,-10,6,-29,17,9, 
  /* [93][0][][] */ 43,-15,127,-7,-44,60,25,-24,-15,25,-67,-13,-18,3,25,8, 
  /* [94][0][][] */ 27,2,-11,-18,28,-4,-19,-4,-29,-21,21,-54,127,-19,30,-28, 
  /* [95][0][][] */ 127,93,0,37,-87,-10,-71,-10,-20,-26,79,-35,-39,19,70,-72, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00077463441994041204, 0.00094937492394819856, 0.0005828512366861105, 0.00089406012557446957, 0.00090328830992802978, 0.0009010162902995944, 0.00051852088654413819, 0.00097483483841642737, 0.00063745951047167182, 0.00085235125152394176, 0.00045696512097492814, 0.00059774384135380387, 0.00095591181889176369, 0.0033413127530366182, 0.00063115672674030066, 0.00044937102939002216, 0.00033765609259717166, 0.00069938553497195244, 0.0012572897830978036, 0.00090459815692156553, 0.00036491060745902359, 0.00019058499310631305, 0.00036380745586939156, 0.00026324592181481421, 0.00055198546033352613, 0.0012917754938825965, 0.0018520156154409051, 0.00083397224079817533, 0.00056355574633926153, 0.0010090667055919766, 0.00054869992891326547, 0.00080089305993169546, 0.00060172425583004951, 0.00055603712098672986, 0.00071135052712634206, 0.00062592723406851292, 0.00043189540156163275, 0.00053210632177069783, 0.00098801357671618462, 0.00085572130046784878, 0.00041004907689057291, 0.0011294445721432567, 0.00080023217014968395, 0.00058203551452606916, 0.0013636709190905094, 0.00061797787202522159, 0.00073001772398129106, 0.00069587311008945107, 0.00079150358214974403, 0.00054915103828534484, 0.0008529301849193871, 0.00052659364882856607, 0.0013223789865151048, 0.00051198585424572229, 0.0011005183914676309, 0.00096220796694979072, 0.0013575764605775476, 0.00062708725454285741, 0.0010545639088377357, 0.00058892561355605721, 0.0021137790754437447, 0.0011418466456234455, 0.00056369154481217265, 0.0015350272879004478, 0.001274562906473875, 0.00059959723148494959, 0.00023690237139817327, 0.00048201734898611903, 0.0015849845949560404, 0.0010781724704429507, 0.00065986812114715576, 0.00058111187536269426, 0.001886286772787571, 0.00093389983521774411, 0.00076508178608492017, 0.00072740862378850579, 0.00069038150832056999, 0.00027155675343237817, 0.0003207282570656389, 0.00047161662951111794, 0.00045750621939077973, 0.00042350898729637265, 0.00058234791504219174, 0.00052956450963392854, 0.00033273393637500703, 0.00070380937540903687, 0.0012576543958857656, 0.00047874081064946949, 0.00033128538052551448, 0.0013866656227037311, 0.00063697458244860172, 0.00067760166712105274, 0.00088011525804176927, 0.0012908491771668196, 0.00097652472322806716, 0.00056771718664094806, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -9195, 14543, -20772, -5546, -8957, 10392, 29567, -55163, 161, 18556, 24983, 17916, -11429, 16760, -8287, 11871, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00079501280561089516, 0.00043347990140318871, 0.00018934771651402116, 0.00022669853933621198, 0.00038124984712339938, 0.00037839807919226587, 0.00035605891025625169, 0.00024461330031044781, 0.00034593217424117029, 0.00027808084269054234, 0.00072860822547227144, 0.00052643613889813423, 0.00041979941306635737, 0.00019939866615459323, 0.00054224015912041068, 0.00044414176954887807, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -19,-16,6,-30,18,-8,-37,-3,19,-1,-10,0,-10,-9,-21,9,-2,10,-5,-2,10,-31,3,11,6,6,7,127,36,-33,46,-6,-3,7,7,9,-5,14,-43,0,-6,7,2,36,7,19,13,4,26,5,-11,6,22,-14,-16,80,8,13,-26,-36,-10,30,-5,-27,-43,-69,-14,41,9,8,24,-20,-9,-31,0,-29,-29,15,-2,4,-15,-25,24,19,1,-15,-4,-94,6,-12,4,-1,49,-28,-30,-11, 
  /* [1][0][][] */ 32,-66,-74,-55,127,-18,69,41,-16,-96,-51,-23,-1,-10,-55,47,-65,15,41,44,17,37,-23,-49,13,-16,-5,-67,39,-16,-56,43,-27,35,8,7,14,-7,-5,26,-23,36,-39,-24,-39,97,7,5,28,-74,6,-45,-17,48,47,9,-57,-17,-28,-30,27,-12,-3,-47,-90,110,-18,-19,-1,-30,-12,9,51,-112,-27,-5,38,-55,38,0,0,-25,22,2,-46,27,-11,24,32,-33,1,13,30,17,42,95, 
  /* [2][0][][] */ -4,50,-94,4,103,80,25,64,5,-110,-2,-28,-16,11,25,26,25,-30,-38,96,37,9,91,16,70,13,1,-50,49,5,68,-58,31,56,-14,49,-127,-83,21,50,9,-36,19,-30,10,-18,14,70,-17,37,-34,-22,102,7,0,45,49,10,35,-6,27,8,42,-45,8,-8,-35,21,-43,-5,-29,-38,-60,-93,24,58,84,60,34,2,24,-44,9,-28,-49,24,7,52,-6,42,-4,-29,13,-20,-55,7, 
  /* [3][0][][] */ 57,19,96,-7,47,-28,10,-14,-16,-57,26,-47,0,47,32,90,19,-15,28,10,127,5,35,12,73,-28,-20,22,37,59,2,90,-91,29,37,-4,-22,-24,-15,46,-77,-23,64,13,15,49,-30,-74,-43,-25,-46,42,-5,-118,8,18,-96,67,54,35,21,80,-12,-54,32,74,-11,-46,31,-20,-11,-64,40,-42,67,-13,4,9,54,48,-29,-70,12,-26,-37,20,23,42,35,24,19,26,38,105,42,-23, 
  /* [4][0][][] */ 12,-11,29,-4,127,36,-22,-26,-37,-49,-31,-40,-51,22,-8,52,30,-86,-28,90,-12,12,37,-6,10,-19,20,-47,11,-4,65,-26,82,16,-19,21,47,16,0,14,-17,0,-33,-27,-11,-40,-10,9,45,20,-23,4,-7,-27,9,-31,35,-15,-33,24,-5,43,56,18,36,40,-8,3,-47,0,33,70,8,-58,-34,-26,31,34,76,-37,-12,-34,5,-13,-72,7,32,52,-37,38,-3,-41,18,21,33,-11, 
  /* [5][0][][] */ 4,-23,-4,21,23,-19,32,-35,-13,-38,-6,-3,-9,30,-1,10,-1,-10,22,9,38,20,-34,66,19,-20,13,-108,1,38,23,37,-10,11,17,-50,35,25,-16,19,3,1,23,-24,-13,11,13,-17,-10,-5,11,-22,-1,-13,-5,-58,6,17,-22,10,60,2,-6,26,-11,49,14,83,13,88,3,34,1,15,2,61,-30,-4,10,12,-23,-7,-2,8,-10,10,-18,127,13,33,-8,-14,10,27,-49,30, 
  /* [6][0][][] */ 29,-77,15,-37,-27,7,42,23,7,6,-13,-69,-38,1,-26,30,17,-4,-6,-8,-47,35,6,7,-33,0,-17,-15,-19,17,33,-5,61,8,58,-4,-4,-15,23,-81,-25,89,11,-35,16,-29,-25,12,-13,29,-35,70,-17,-65,-12,-17,-7,-58,-6,1,-14,64,36,-78,29,-26,6,-15,-6,-3,127,-3,-40,2,-24,19,-82,-5,16,5,32,49,17,-2,-22,-2,44,32,11,8,54,-35,-21,-10,-33,-16, 
  /* [7][0][][] */ 23,127,34,9,118,53,43,-29,-23,-14,40,-4,-21,31,19,20,18,-49,6,31,39,-36,39,-5,-13,23,6,4,17,-23,5,4,52,-6,-42,-1,14,12,6,79,-58,31,16,23,-7,-29,29,-18,-33,-31,41,16,17,-49,-27,51,40,6,-25,-1,-7,-48,-1,-1,-51,83,-50,-85,-8,-33,-18,72,-10,-35,7,23,57,70,55,-9,-35,-41,-13,-6,-27,66,-5,-2,-42,26,-29,-45,-52,-19,19,-7, 
  /* [8][0][][] */ -20,-3,54,32,-127,-26,35,-23,42,82,66,7,-18,16,22,3,-38,1,27,3,-30,3,-101,59,21,-42,61,-16,7,23,10,44,64,-7,9,2,-14,-11,1,39,17,-17,39,3,-48,7,49,9,-80,26,26,17,-62,-35,-31,34,20,-42,-79,-23,14,-43,-33,-11,0,69,2,-46,25,-18,-51,-9,22,50,54,-4,-24,-37,-13,21,-77,6,-11,-10,19,31,48,39,39,-29,39,31,13,7,44,29, 
  /* [9][0][][] */ 20,-114,-19,23,86,79,-39,-32,21,-28,85,98,-19,20,83,-100,13,-40,6,25,-53,-42,38,-21,-24,7,-9,18,-23,14,7,-9,13,16,-94,21,0,20,-6,60,27,-60,-14,59,7,-6,-76,-32,25,25,-10,-81,53,19,-4,-54,-2,88,-16,-6,15,-58,-34,127,-79,-13,-11,-7,3,33,-64,-66,49,2,-10,37,58,-53,30,3,-1,-31,10,20,-6,-57,19,-3,-5,-37,-59,14,-57,2,0,-42, 
  /* [10][0][][] */ -51,-25,-26,-39,-27,-4,66,-30,39,13,26,28,22,-18,0,-5,-8,28,-27,-16,-6,35,20,28,-13,-18,12,-127,27,-38,56,-27,-2,21,-6,-3,0,34,-4,-3,15,-31,24,-45,9,1,24,14,-1,38,-31,-21,-30,-17,-10,-58,24,18,-3,-40,22,13,-7,5,-37,82,-5,-31,16,-31,5,-21,-32,-6,21,46,-9,34,-26,14,-26,2,8,22,13,-23,-7,115,4,-2,10,17,23,-33,49,-27, 
  /* [11][0][][] */ -91,16,0,2,10,-61,-23,-12,-47,2,-3,20,32,29,-29,-12,53,-6,-60,-47,35,5,0,-5,84,-3,62,-12,-18,33,-40,14,-6,37,-9,-11,-9,8,27,17,-20,-1,-5,2,79,21,87,26,53,49,3,40,12,-68,31,-12,-66,-18,-39,-51,-7,-23,0,23,-1,-26,29,4,30,14,-17,40,-29,10,35,9,-28,91,-127,76,-36,-9,-68,-77,121,28,34,-9,18,54,-35,-76,-19,54,-27,7, 
  /* [12][0][][] */ -12,-17,-30,11,57,25,-2,-24,-12,24,21,-8,6,-17,31,-17,-35,-19,19,-11,-1,-9,-32,52,-15,32,-24,95,-18,48,-25,1,-13,34,19,40,-10,-12,17,10,6,-6,-9,4,-16,10,30,27,7,9,7,-35,-20,27,-12,-20,2,3,12,17,-16,-29,-13,51,38,-87,17,64,-24,-127,-14,61,-3,15,8,91,2,-13,-2,4,-6,18,-38,-6,7,-11,-4,-42,3,14,3,-11,-31,48,-4,33, 
  /* [13][0][][] */ -100,60,8,11,-74,11,-21,4,-35,-13,48,33,94,20,-19,-4,-17,15,-26,-1,20,0,67,-71,75,43,-3,1,8,-16,-36,-115,-101,-35,6,-5,1,25,43,3,-48,121,0,11,35,25,-3,4,95,-7,53,83,60,-80,91,-33,-23,65,34,-1,13,21,-24,9,-8,-21,-8,18,20,15,1,-127,-1,-35,-83,25,59,67,-49,-39,103,-17,2,-45,38,-17,93,18,-13,-9,-21,10,58,-19,-33,21, 
  /* [14][0][][] */ -26,36,-28,-69,38,-4,-2,46,-106,-7,14,17,-20,-66,-80,-19,-96,-4,59,-7,26,-17,7,-109,-42,33,-56,-9,5,-33,-16,-31,-66,-43,22,12,-25,-12,11,-14,-1,72,-73,-10,-45,6,1,2,127,-38,22,-4,29,52,-116,34,-39,27,-104,20,11,45,45,36,14,37,-8,-6,-62,25,77,20,48,-14,-44,19,57,-91,-33,-106,14,-35,6,53,38,-87,-33,1,-53,10,38,75,8,19,11,-28, 
  /* [15][0][][] */ -46,-79,2,-29,5,10,-6,-69,-20,18,4,-32,34,-10,40,-14,-80,-10,-9,17,-13,12,-57,-35,-3,-7,-1,12,-15,-7,68,-85,-9,35,19,17,3,22,-95,8,34,-59,4,22,-30,-35,50,27,58,26,-10,-127,-4,46,-2,30,40,-11,-17,35,5,-11,36,-8,-2,-12,-5,-3,-18,18,-2,44,-46,11,4,-28,-28,-8,2,8,-7,43,0,60,-14,-36,-38,-24,-34,60,24,73,-28,5,7,-5, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.033788044005632401, 0.018422896042466164, 0.0080472780391573906, 0.009634687565267086, 0.016203118488192558, 0.016081918030977249, 0.01513250358402729, 0.010396065190434456, 0.014702117070555687, 0.011818435974419117, 0.030965849757194519, 0.022373536601662636, 0.017841475084424019, 0.008474443107843399, 0.023045206442475319, 0.018876025453209877, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 15782, 61826, -1761, -627, 13483, -3823, -211, -166, 5708, 11403, -5452, -312, 381, 4663, 5111, -9319, -4067, -283, -533, 13404, -9894, 16350, -2662, 10266, 35221, -5, -5269, 18205, 14281, -18465, 2003, 21887, 23365, -7655, 1932, 220, -292, 292, 4827, -7131, -4894, -912, -9238, 52, 30115, -1812, 13325, -960, -14745, 1976, -40, 437, -2799, 19974, -2941, 14678, 19303, 50, 35621, -302, -9167, -171, 1339, 152, -787, 13602, -455, -6158, -3190, 4522, 203, -3708, 1571, -139, -1832, -7975, -380, -1763, 47232, -6569, -5600, -11436, -330, 528, 63026, -14396, -11096, -27558, -6645, 10182, -1987, 36551, -21, -1848, -2438, 1100, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00015158471069298685, 9.1433219495229423e-05, 0.00010883972572628409, 0.00021168806415516883, 0.00024906551698222756, 0.00021372079208958894, 8.4582512499764562e-05, 8.1951504398602992e-05, 0.00024433224461972713, 0.00021549525263253599, 0.00023671930830460042, 0.00012125533248763531, 0.00027335045160725713, 0.00020777681493200362, 0.00039174474659375846, 0.00016140415391419083, 0.00022197869839146733, 0.00021826344891451299, 0.00018529705994296819, 8.5546336777042598e-05, 8.7663414888083935e-05, 4.2247680539730936e-05, 0.00012937025167047977, 7.85600277595222e-05, 9.2032008979003876e-05, 0.00012017657718388364, 0.00018389288743492216, 0.00017033024050761014, 7.6002746936865151e-05, 0.00049287127330899239, 0.00038088680594228208, 0.00025173698668368161, 0.0001086052434402518, 0.00021409096370916814, 0.00024286315601784736, 0.00042809994192793965, 0.00039371414459310472, 0.00026441947557032108, 0.00021899252897128463, 0.00010192296031164005, 0.00024586627841927111, 0.00017632650269661099, 0.00032540815300308168, 7.8243640018627048e-05, 0.000361146085197106, 9.2090362159069628e-05, 0.00011585063475649804, 0.00033557749702595174, 0.00067229918204247952, 0.00013624296116176993, 0.00041580197284929454, 0.0001560063537908718, 0.00018300568626727909, 0.00013918397598899901, 0.00028933290741406381, 0.00011991307837888598, 0.00014389278658200055, 0.00040584869566373527, 3.8102854887256399e-05, 0.00016961144865490496, 0.00032081338576972485, 0.00035194982774555683, 0.00012502973549999297, 0.00016119994688779116, 0.00013681664131581783, 0.00013506734103430063, 0.00031095120357349515, 0.00034970062552019954, 0.00020045592100359499, 9.1560497821774334e-05, 0.00023762347700539976, 0.00010029849363490939, 0.00026645619072951376, 0.00014874448243062943, 0.00038410269189625978, 0.00023212963424157351, 0.0001194089199998416, 8.0051890108734369e-05, 5.4376036132453009e-05, 0.00019776646513491869, 0.00023548031458631158, 0.00022590055596083403, 0.00016221398254856467, 0.00031252956250682473, 5.6638080422999337e-05, 9.5756309747230262e-05, 7.3216477176174521e-05, 0.00048517243703827262, 0.00026312892441637814, 0.00012492072710301727, 0.00037351224455051124, 3.1523137295152992e-05, 0.00017490980098955333, 0.00010241793643217534, 0.00037034097476862371, 0.00023994100047275424, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -49,-72,-10,127,22,70,74,-58,-14,-18,-14,-3,-30,1,37,2,-10,-41,26,22,19,-127,127,5,-81,8,49,-29,-127,-127,38,24,12,26,60,-19,-30,-9,30,-10,-13,26,-110,70,25,-63,37,46,-18,50,-23,19,3,-7,15,48,-92,-50,-61,-18,-11,0,10,38,67,-25,72,14,-8,16,18,127,22,23,27,0,-10,16,127,-6,-15,14,-28,20,126,21,-76,-16,0,-33,-15,-40,2,-25,-16,25, 127,-127,76,106,-43,127,41,-115,70,4,-17,127,127,-100,-14,15,11,127,127,-111,127,-80,81,67,-127,-114,-66,-35,-57,45,-59,-20,-91,51,-127,-86,-43,-14,-54,59,-1,127,127,81,-52,-109,-111,-50,-15,-127,44,84,66,-32,43,84,-48,41,-78,-113,-44,-43,-62,68,72,-62,26,30,-81,32,-18,92,115,127,13,20,2,58,-32,51,64,127,127,-23,-10,77,-113,127,-120,-101,4,-127,-89,-127,-39,104, -77,-12,31,-81,15,-27,66,-7,80,-35,-27,19,-19,-7,-9,-12,-9,-14,7,-4,-22,-108,30,-1,-121,97,6,-55,117,48,-15,10,0,14,13,-30,-10,34,19,10,25,12,-122,64,18,-16,36,14,-14,11,-15,5,-9,1,-3,20,-67,6,-32,52,2,39,33,0,-7,-39,-30,22,10,2,-4,36,9,-25,-3,6,-11,-7,-83,2,-21,-24,-18,2,-111,10,-33,-22,-50,23,-25,-31,29,-27,-14,0, 
  /* [0][1][][] */ -67,-75,75,-35,-48,96,17,127,-52,-22,0,-116,25,-113,79,33,-3,-59,-17,89,55,-73,48,51,-94,-10,127,-23,-23,62,119,-105,-127,92,-86,-58,-35,31,-30,95,-50,-27,-4,47,-48,127,-24,66,15,95,20,-2,13,-54,26,32,127,123,-72,-85,127,-34,-36,127,71,-39,-16,0,127,40,127,96,-41,102,-4,11,14,12,-31,10,-44,122,-81,109,0,34,-55,31,78,-127,-32,-9,127,-68,-24,-1, 66,126,58,-113,127,86,92,39,-127,127,127,-37,-64,-127,-127,127,127,-63,-124,-50,105,99,-122,127,-111,-88,-42,127,-127,108,-127,-127,-89,127,107,127,127,-127,-107,127,-66,-97,112,-127,-127,-32,-127,-127,127,-111,86,42,127,127,127,-127,100,-127,-127,127,19,-81,-127,-101,-127,127,-127,127,-124,-127,-107,-83,-127,-78,127,127,-127,127,-77,127,127,30,-42,-127,60,127,90,46,127,12,127,0,-67,35,127,-127, -55,-13,-49,37,-56,-98,36,-25,19,-35,-28,93,1,93,14,11,-4,62,-6,127,3,-91,-41,8,-75,107,-69,-20,-69,-17,16,-62,-71,37,5,-19,-29,44,-69,44,127,-5,-40,30,-40,-56,15,45,8,118,-11,6,-37,-72,4,19,94,2,2,22,-34,127,92,-51,-43,12,37,-10,-76,123,-18,-87,-2,-53,-16,-19,28,15,77,-33,-70,-42,57,14,-48,-17,70,23,14,62,-43,19,-43,96,-27,-6, 
  /* [0][2][][] */ -66,2,-3,-21,13,-46,66,24,54,-29,-35,-2,19,21,-26,0,-7,64,7,1,-54,-84,2,-11,-31,-52,36,-70,92,37,26,26,18,-7,-10,-48,-6,35,-4,2,-15,-6,-68,104,3,31,10,36,-15,-32,11,-20,22,0,9,15,-70,25,-15,14,15,0,-21,-5,-1,-47,-47,15,-32,12,26,29,14,-19,30,3,17,4,-77,-12,-10,-10,18,14,-127,9,13,-44,-58,-51,-27,-49,10,58,-19,-7, 125,34,-127,-35,-72,-27,40,30,-65,-30,-19,-106,-76,114,-13,35,2,-50,-10,-125,93,-53,-38,-2,-116,127,-49,20,-33,-22,-8,-3,-62,16,28,4,-23,-28,127,56,11,-14,69,-35,-39,76,-68,-44,-33,-6,-127,-127,-49,-26,2,40,-66,-7,11,38,-7,-19,8,-48,-54,33,63,-21,115,108,-24,-71,14,-57,4,5,100,3,51,21,11,-98,-50,2,2,9,127,39,-61,37,-19,-109,41,79,-11,26, -53,13,-17,26,16,-70,-127,3,-11,-9,-15,4,16,-25,19,-3,-8,-16,5,17,-49,-76,14,-1,15,-93,22,3,-48,-40,-6,17,44,-20,-6,-26,-35,3,41,-38,23,-2,-49,-34,3,64,22,16,-9,-5,10,-9,19,6,-3,-5,-62,-12,3,-38,-11,9,84,-11,34,-2,-2,28,2,4,-4,19,-16,16,0,15,36,0,74,-11,2,-9,-7,-18,74,3,43,-39,58,37,-17,-53,-7,2,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0064423498697578907, 0.0038859117776155472, 0.0046256883069872856, 0.0089967427775263786, 0.010585283860564232, 0.009083133190870285, 0.0035947568248957396, 0.0034829387441277504, 0.010384120047092438, 0.009158547967672348, 0.010060570202767849, 0.0051533514633774757, 0.011617394164204597, 0.0088305147364735603, 0.016649151220917702, 0.0068596764467656612, 0.0094340946525335312, 0.0092761963605880737, 0.0078751249238848686, 0.0036357191856950521, 0.0037256949581205845, 0.0017955263610929251, 0.0054982355795800686, 0.0033388009760528803, 0.0039113601669669151, 0.005107504315674305, 0.007815447635948658, 0.0072390353307127953, 0.0032301165629178286, 0.020947027951478958, 0.016187688335776329, 0.010698822326958179, 0.0046157226897776127, 0.0090988660231232643, 0.010321684181690216, 0.018194247037172318, 0.016732851043343544, 0.011237827129662037, 0.0093071823939681053, 0.004331725649535656, 0.01044931635260582, 0.0074938759207725525, 0.013829845935106277, 0.0033253547735512257, 0.015348708257079124, 0.0039138402789831161, 0.0049236519262194633, 0.014262043870985508, 0.028572715818881989, 0.0057903258129954338, 0.017671583220362663, 0.0066302698105573654, 0.0077777416445314884, 0.0059153186157345772, 0.012296647764742374, 0.0050963056273758411, 0.0061154430732131004, 0.017248569056391716, 0.0016193712363019586, 0.0072084865532815456, 0.013634569011628628, 0.014957867562770844, 0.0053137638606131077, 0.0068509979173541069, 0.0058147073723375797, 0.0057403617538511753, 0.013215426355600357, 0.014862276613712311, 0.008519376628100872, 0.0038913211319595575, 0.010098997503519058, 0.0042626857757568359, 0.011324387975037098, 0.0063216406852006912, 0.016324363648891449, 0.0098655093461275101, 0.0050748791545629501, 0.0034022054169327021, 0.0023109815083444118, 0.0084050744771957397, 0.01000791322439909, 0.0096007734537124634, 0.0068940944038331509, 0.013282506726682186, 0.0024071184452623129, 0.0040696430951356888, 0.0031117002945393324, 0.020619828253984451, 0.011182979680597782, 0.005309130996465683, 0.015874270349740982, 0.0013397333677858114, 0.0074336663819849491, 0.0043527623638510704, 0.015739491209387779, 0.010197492316365242, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1886, 6149, 15891, 26085, 15415, -3313, -1864, 5068, 31552, -4335, 7666, 3665, 9437, 9675, 36727, 1519, 2347, 7913, 14318, 6042, -288, 427, 13260, -1209, 3031, 0, 11174, 6790, 6061, 29436, 55520, 13919, 6791, -1005, 8445, 2511, 995, 3193, 19654, -636, 11709, 8436, 53321, -3168, 26879, 8407, 6143, 13424, 55991, 8445, -570, 8068, -3631, -110, -2444, 6032, -546, 11433, 5929, 6589, 5570, 15722, 7631, 4840, 10552, 7687, 5857, -5704, 5698, -1834, 4805, 11114, 20987, 6078, -3351, -4170, 5532, 201, 1872, -927, 14409, 16351, 4378, 15427, 2699, 279, 8086, 67820, 9278, 10415, 5784, -121, 6958, 8910, 5050, 11722, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00021958931756671518, 0.00023821780632715672, 0.0001196301745949313, 8.8618908193893731e-05, 0.00019412869005464017, 0.00030552849057130516, 0.00042046362068504095, 0.00031639719964005053, 7.4075629527214915e-05, 0.0003165587258990854, 0.00034653951297514141, 0.00024382723495364189, 0.00013617743388749659, 0.00023774958390276879, 6.5457905293442309e-05, 0.00037665944546461105, 0.00020026697893626988, 0.00015342245751526207, 0.000156719412188977, 0.00019420294847805053, 0.00032926321728155017, 0.00056943472009152174, 0.00015266881382558495, 0.0005427152500487864, 0.00087008171249181032, 0.0002620851737447083, 0.00020090714679099619, 0.00020949721510987729, 0.00026958505623042583, 0.000120235861686524, 5.0628765166038647e-05, 0.00017894829215947539, 0.00024295538605656475, 0.00024859805125743151, 0.00023847183911129832, 0.00024639934417791665, 0.00052332913037389517, 0.00046520429896190763, 0.00013726334145758301, 0.00086937757441774011, 0.0001607476151548326, 0.00019073243311140686, 5.0648774049477652e-05, 0.00033020594855770469, 0.00012104095367249101, 0.00017730367835611105, 0.00028213841142132878, 0.00020065529679413885, 7.3639006586745381e-05, 0.00025229831226170063, 0.00022000803437549621, 0.00021128883236087859, 0.0002933020587079227, 0.00034320339909754694, 0.00041769680683501065, 0.00018589079263620079, 0.00021104497136548162, 0.0001645481534069404, 0.00034562748624011874, 0.0002250012184958905, 0.00029162122518755496, 8.8380103989038616e-05, 0.00019125330436509103, 0.00020812674483750015, 0.00023493285698350519, 0.0002523316943552345, 0.0002232320694020018, 0.00023476011119782925, 0.00029406440444290638, 0.00038720422890037298, 0.0002260323817608878, 0.00014153891243040562, 9.7877637017518282e-05, 0.00016946723917499185, 0.00045503879664465785, 0.00031916552688926458, 0.00029520716634579003, 0.00034153278102166951, 0.00039690535049885511, 0.00043177584302611649, 0.00014281747280620039, 0.00010298271081410348, 0.00019829398661386222, 0.00012509565567597747, 0.00042605324415490031, 0.00024087772180791944, 0.00029326527146622539, 5.697667074855417e-05, 0.00015226910181809217, 0.0002142507437383756, 0.00022038191673345864, 0.00048675626749172807, 0.0002095005038427189, 0.00018051118240691721, 0.00022572488524019718, 0.00014597676636185497, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 30,71,-13,106,51,41,12,-23,42,43,-62,118,21,-127,44,-122, 
  /* [1][0][][] */ 19,44,-5,-16,20,-22,127,-98,4,88,-17,-14,-1,-48,29,8, 
  /* [2][0][][] */ -127,42,-30,-32,12,-15,56,99,-44,51,117,-22,-76,24,24,-49, 
  /* [3][0][][] */ -91,61,26,39,-59,49,70,123,0,67,-127,8,49,-87,-60,-63, 
  /* [4][0][][] */ 4,3,27,71,-23,62,-4,35,8,-8,-9,3,30,-14,-127,-38, 
  /* [5][0][][] */ -10,-25,49,-19,5,-27,6,37,-69,95,-21,-127,-19,31,-66,-18, 
  /* [6][0][][] */ 22,-3,40,-9,44,59,-73,-82,-9,1,46,-10,127,-15,-14,-30, 
  /* [7][0][][] */ 11,18,127,-24,-31,-28,23,-22,-100,40,-89,-49,1,-19,46,-29, 
  /* [8][0][][] */ 11,19,88,61,-55,88,32,49,44,14,-3,-97,-42,0,-127,-78, 
  /* [9][0][][] */ 41,-113,64,48,9,-21,-12,21,127,-5,90,17,-30,3,-115,-28, 
  /* [10][0][][] */ -16,-114,21,-21,-79,2,-16,49,99,127,36,-41,-47,89,78,16, 
  /* [11][0][][] */ 45,0,9,-93,13,-33,-124,-127,-45,35,-11,-32,33,-20,28,-59, 
  /* [12][0][][] */ -29,0,-1,-54,-49,-41,-91,-10,-62,-72,-42,31,26,127,98,27, 
  /* [13][0][][] */ -21,-110,-58,43,-2,-66,4,-10,70,21,-8,-14,38,16,127,39, 
  /* [14][0][][] */ 5,-74,72,44,40,48,4,127,11,66,4,-55,27,34,-63,118, 
  /* [15][0][][] */ 17,-29,0,70,23,-5,104,7,13,-127,20,-25,8,-16,-7,-39, 
  /* [16][0][][] */ 45,-89,-63,26,3,-2,48,-74,127,76,94,7,4,120,70,122, 
  /* [17][0][][] */ -64,-43,34,127,93,61,-5,-14,100,-42,21,-33,26,29,-64,24, 
  /* [18][0][][] */ -13,24,3,16,-100,-12,-10,33,-53,-28,-4,-38,10,-127,67,0, 
  /* [19][0][][] */ 47,-54,40,-64,87,37,-113,78,107,-94,87,50,-13,76,32,127, 
  /* [20][0][][] */ 43,-28,75,-67,-7,7,-33,57,-20,-50,91,-10,9,22,-46,127, 
  /* [21][0][][] */ -69,-27,0,-38,16,10,-88,-64,-26,59,-3,2,-127,-31,29,-20, 
  /* [22][0][][] */ 22,-20,22,-32,22,-74,0,-27,-127,23,-8,-42,-10,-11,83,-18, 
  /* [23][0][][] */ 17,11,14,-3,9,11,-5,6,-4,0,44,-7,127,-1,-1,-33, 
  /* [24][0][][] */ -1,2,23,-33,7,6,39,-12,-30,12,-13,-127,10,-87,18,23, 
  /* [25][0][][] */ -127,4,-51,-17,56,-29,-109,-112,-44,50,-52,-48,-60,-82,34,-72, 
  /* [26][0][][] */ 26,-29,43,-115,127,-33,-3,-2,101,-46,31,-33,-2,84,18,68, 
  /* [27][0][][] */ 95,-28,27,-31,-28,-45,-5,-9,-30,17,-127,8,11,-17,2,38, 
  /* [28][0][][] */ -127,-17,-122,-60,92,24,114,-78,1,92,-81,34,42,0,-79,72, 
  /* [29][0][][] */ -50,-26,-1,127,-4,10,-3,-59,-1,-12,-75,55,26,-63,24,-22, 
  /* [30][0][][] */ 64,-32,127,-29,57,46,-22,73,-36,-97,73,-64,-18,43,-91,94, 
  /* [31][0][][] */ 20,-75,0,-39,3,-55,26,-38,-7,42,104,23,-12,84,58,127, 
  /* [32][0][][] */ -18,61,-36,32,-127,17,-80,-45,-57,-39,-3,40,4,44,37,56, 
  /* [33][0][][] */ 32,-30,11,127,-5,-20,32,-51,-126,64,50,-12,26,3,29,117, 
  /* [34][0][][] */ 41,2,-9,-17,68,-54,-127,-20,-56,86,-52,6,-18,-6,12,-1, 
  /* [35][0][][] */ 82,6,-7,-14,21,-127,-35,-15,-40,-22,-101,-13,70,24,5,23, 
  /* [36][0][][] */ 12,1,-127,8,43,6,-29,14,-25,-16,9,-1,6,7,-12,5, 
  /* [37][0][][] */ 7,-7,127,-9,-61,29,25,-67,-16,15,-52,12,18,-3,13,11, 
  /* [38][0][][] */ -127,42,-10,36,28,89,21,-14,17,-7,116,-18,-17,1,-2,-32, 
  /* [39][0][][] */ -14,0,15,30,31,-15,-127,31,6,12,-2,-23,-5,-13,-3,-1, 
  /* [40][0][][] */ -6,49,-18,127,11,39,47,26,-57,-42,-31,69,11,51,-70,-17, 
  /* [41][0][][] */ 17,18,-37,-10,-31,-5,127,83,-45,76,-16,8,12,72,28,-10, 
  /* [42][0][][] */ 22,-79,-68,-50,33,11,-98,66,124,-127,118,63,-16,70,-46,72, 
  /* [43][0][][] */ -73,10,19,-51,26,18,-91,-91,-23,37,2,-16,-127,-21,37,-5, 
  /* [44][0][][] */ 6,-4,-15,-5,-2,-20,-12,-57,127,-14,24,39,21,73,6,47, 
  /* [45][0][][] */ -72,-98,-16,-127,38,-27,2,71,-3,-63,-24,-17,39,125,-22,124, 
  /* [46][0][][] */ -53,31,-31,106,-84,-27,15,-95,-127,59,-36,-36,-8,28,0,-50, 
  /* [47][0][][] */ -30,-6,-95,127,-3,64,3,-16,18,55,53,63,-30,-7,18,-13, 
  /* [48][0][][] */ -15,6,46,-127,48,-37,-24,0,-55,13,41,-12,-33,89,108,57, 
  /* [49][0][][] */ -7,31,55,127,22,41,-53,-21,32,-58,-64,-25,-2,-22,-62,-82, 
  /* [50][0][][] */ -17,54,27,-127,41,-1,-21,62,113,-28,-33,-6,-16,-36,23,-19, 
  /* [51][0][][] */ 7,-26,19,-11,43,-16,-63,-127,13,-83,0,-6,-22,-6,-11,-5, 
  /* [52][0][][] */ 34,6,-10,27,41,-23,-70,120,-101,127,-59,-64,81,115,-1,-42, 
  /* [53][0][][] */ -7,93,18,-75,-25,12,24,-14,-65,-61,-39,49,27,-127,-104,12, 
  /* [54][0][][] */ -3,8,13,27,43,-27,10,-35,-6,31,-14,-19,-10,127,-38,-10, 
  /* [55][0][][] */ -121,127,99,-12,58,-1,-20,-25,-38,25,122,-19,-20,-20,115,-10, 
  /* [56][0][][] */ 65,7,13,-105,87,3,-18,28,60,-52,48,127,-17,17,92,58, 
  /* [57][0][][] */ -25,-10,14,63,-26,9,44,127,-5,3,-4,-21,-9,57,9,29, 
  /* [58][0][][] */ 17,119,-2,-127,1,37,-20,10,112,-18,-4,73,7,-98,53,57, 
  /* [59][0][][] */ 27,63,62,-110,-44,-4,39,-14,19,33,37,-90,-27,-127,-83,31, 
  /* [60][0][][] */ 55,-4,114,-36,-33,127,23,-27,-7,29,-51,-3,32,17,25,0, 
  /* [61][0][][] */ -33,14,-61,-59,-75,4,127,115,-22,75,-7,0,11,74,37,-22, 
  /* [62][0][][] */ -15,-1,-10,-11,-90,23,-61,-3,-41,-30,0,-64,8,-127,93,7, 
  /* [63][0][][] */ 15,-30,-11,-94,40,-5,-114,-127,-63,88,-17,11,58,-9,28,-34, 
  /* [64][0][][] */ -25,-6,27,39,71,-6,-45,-127,21,-123,-9,-34,1,-33,-1,3, 
  /* [65][0][][] */ -127,14,18,-69,6,64,43,-57,-80,31,47,-12,3,17,-12,-30, 
  /* [66][0][][] */ 75,13,88,-5,-69,24,-36,61,-66,-17,61,-114,-13,48,-127,-24, 
  /* [67][0][][] */ 25,-32,-61,49,30,-62,-91,-80,26,-127,-84,-17,-77,13,-44,38, 
  /* [68][0][][] */ 19,-33,-65,63,-44,-82,8,-47,-26,-15,52,-60,-11,66,127,-1, 
  /* [69][0][][] */ -20,29,-59,54,-6,-127,12,71,34,-6,44,-9,115,39,-22,15, 
  /* [70][0][][] */ -3,9,-55,-53,-55,-14,127,77,-36,49,-11,-12,-3,40,25,-23, 
  /* [71][0][][] */ 15,-18,-22,-51,30,9,17,63,-36,-42,-23,7,16,-127,74,8, 
  /* [72][0][][] */ 37,50,-10,49,46,-56,-73,-127,36,49,-28,38,74,79,41,65, 
  /* [73][0][][] */ -44,-127,-25,-73,-77,-23,30,-34,-27,4,-33,-36,26,-45,54,-3, 
  /* [74][0][][] */ -38,33,67,98,-3,5,-127,89,16,-45,-32,-34,-9,1,-20,-7, 
  /* [75][0][][] */ -61,31,-47,10,-31,82,98,114,-2,71,-12,-18,-127,61,27,4, 
  /* [76][0][][] */ 2,-19,-50,-5,49,-59,-110,-127,-19,0,-2,7,39,-16,80,-51, 
  /* [77][0][][] */ -26,18,-47,-26,-59,-12,-9,-36,127,9,-71,25,-5,52,24,-73, 
  /* [78][0][][] */ -94,-127,-4,89,68,65,-33,26,-11,-71,-109,74,40,-16,87,64, 
  /* [79][0][][] */ 46,-30,39,-52,127,0,51,22,71,19,-2,38,-5,-23,18,-41, 
  /* [80][0][][] */ 0,-24,78,-81,-7,-18,5,7,-69,-48,13,-62,6,127,-52,19, 
  /* [81][0][][] */ 25,-6,39,33,7,45,-10,-22,7,-15,1,-40,-1,34,-127,21, 
  /* [82][0][][] */ -82,-34,24,-111,-30,-43,5,-40,-39,-25,-44,-126,-12,-127,-81,33, 
  /* [83][0][][] */ -11,18,-41,-84,-65,1,5,40,-85,8,15,-93,10,-127,12,41, 
  /* [84][0][][] */ 127,27,27,42,-55,-9,-65,20,-19,-28,104,8,-83,22,100,-76, 
  /* [85][0][][] */ -2,-23,19,-43,35,-18,-47,127,-78,-125,-84,-21,-29,90,78,-118, 
  /* [86][0][][] */ 16,0,15,7,-69,62,-46,47,-83,-56,43,-16,-15,-127,-16,43, 
  /* [87][0][][] */ 127,-40,9,0,-39,-32,-1,-11,6,22,-124,14,34,-5,1,24, 
  /* [88][0][][] */ 42,74,-33,-2,-24,-4,-33,-14,87,24,35,34,-24,-35,127,-120, 
  /* [89][0][][] */ 51,96,-74,4,-26,-12,28,-77,63,62,54,-44,-50,15,-40,-127, 
  /* [90][0][][] */ -19,-23,6,-89,-89,26,127,-46,96,-88,27,-108,57,-36,-37,-14, 
  /* [91][0][][] */ 16,8,-21,-106,-53,-12,30,-27,-43,24,46,57,11,-10,27,127, 
  /* [92][0][][] */ 26,11,17,20,76,-12,-76,-127,56,-67,-5,-21,-40,-7,-11,-15, 
  /* [93][0][][] */ 80,-7,54,-127,-41,-5,-33,50,45,-78,89,-20,-33,127,-23,28, 
  /* [94][0][][] */ -107,44,-80,7,83,-127,-10,12,-15,-51,106,-44,-18,2,-30,-11, 
  /* [95][0][][] */ -27,71,38,-127,11,11,-20,11,20,-27,-63,-92,-10,31,-82,-7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00062981562223285437, 0.00068324495805427432, 0.00034311757190153003, 0.00025417254073545337, 0.00055679067736491561, 0.00087630224879831076, 0.0012059537693858147, 0.00090747541980817914, 0.0002124602033291012, 0.00090793863637372851, 0.00099392817355692387, 0.00069933367194607854, 0.00039057762478478253, 0.00068190204910933971, 0.00018774325144477189, 0.001080316724255681, 0.00057439622469246387, 0.00044003897346556187, 0.00044949515722692013, 0.00055700365919619799, 0.00094437709776684642, 0.0016332255909219384, 0.00043787743197754025, 0.0015565900830551982, 0.002495527034625411, 0.00075170019408687949, 0.00057623232714831829, 0.00060086994199082255, 0.00077321106800809503, 0.00034485477954149246, 0.00014521101547870785, 0.00051325099775567651, 0.00069683307083323598, 0.00071301712887361646, 0.00068397360155358911, 0.0007067109108902514, 0.0015009876806288958, 0.0013342768652364612, 0.00039369217120110989, 0.0024935074616223574, 0.00046104867942631245, 0.00054704968351870775, 0.00014526840823236853, 0.00094708101823925972, 0.00034716390655376017, 0.00050853396533057094, 0.00080921594053506851, 0.00057550997007638216, 0.00021120789460837841, 0.00072363001527264714, 0.00063101656269282103, 0.00060600857250392437, 0.0008412349852733314, 0.00098435964901000261, 0.001198018086142838, 0.00053316314006224275, 0.00060530914925038815, 0.00047194919898174703, 0.00099131232127547264, 0.00064533780096098781, 0.00083641411038115621, 0.0002534876111894846, 0.00054854364134371281, 0.00059693923685699701, 0.00067382323322817683, 0.0007237257668748498, 0.0006402636063285172, 0.0006733277696184814, 0.00084342155605554581, 0.0011105607263743877, 0.00064829533221200109, 0.00040595518657937646, 0.00028072798158973455, 0.00048605789197608829, 0.0013051206478849053, 0.00091541535221040249, 0.00084669917123392224, 0.0009795681107789278, 0.0011383850360289216, 0.0012383989524096251, 0.00040962229832075536, 0.00029537011869251728, 0.0005687373923137784, 0.00035879341885447502, 0.0012219856726005673, 0.00069087400333955884, 0.0008411295129917562, 0.00016341777518391609, 0.00043673100299201906, 0.0006145038059912622, 0.00063208892242982984, 0.0013960911892354488, 0.00060087937163189054, 0.00051773356972262263, 0.00064741336973384023, 0.00041868363041430712, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -531, -3499, -10977, 32071, 28910, 4935, -11759, -8904, 24362, 1214, 33389, 22848, -9192, 10584, 36616, -24732, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00039954774547368288, 0.00024168977688532323, 0.00028817597194574773, 0.00026243191678076982, 0.00039546313928440213, 0.00029440151411108673, 0.0002910351031459868, 0.00042773096356540918, 0.00022143726528156549, 0.00025639697560109198, 0.00035172954085282981, 0.00069638167042285204, 0.00044395867735147476, 0.00048381683882325888, 0.00045865107676945627, 0.00025193882174789906, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -3,22,-3,23,45,79,-31,-26,45,1,10,4,-4,5,20,71,8,-5,-11,1,98,-56,7,-18,-33,-43,-47,-99,-11,-9,55,54,127,-2,8,-8,17,-21,-26,7,-39,18,20,-27,10,-31,-17,33,-17,25,3,-12,-35,-17,-1,-1,47,32,-24,-29,-56,24,-4,-3,16,14,59,3,17,4,3,-18,-77,-12,-5,-2,-10,-92,11,-15,36,-20,-59,-50,27,-16,1,21,-1,9,20,-35,24,27,-3,126, 
  /* [1][0][][] */ 84,-116,55,96,-6,-64,-7,-46,-28,-103,-13,28,19,-65,-44,-57,-78,2,34,22,-46,-114,-44,28,127,-76,-70,15,-39,95,-7,44,18,6,-38,17,-12,-20,50,-32,-4,-85,80,-41,-53,19,59,3,33,24,1,-75,72,-88,43,-32,28,39,-22,-122,41,-73,31,-45,11,-84,41,53,52,53,-36,7,-115,37,-26,64,35,106,28,-17,44,14,-82,33,-95,63,-2,62,-43,7,33,5,3,-49,51,0, 
  /* [2][0][][] */ 34,28,13,-21,5,0,-3,47,66,-16,8,64,0,16,53,13,-13,-14,10,-7,-27,-62,13,-56,3,-20,-31,20,-9,14,122,-54,27,-64,-26,63,27,127,-49,-30,-6,-24,6,45,-44,-45,-72,23,20,39,-44,-40,21,-8,-12,-33,-23,0,-8,37,2,13,84,86,-3,-79,21,-70,-3,-1,-12,23,-28,5,-19,9,8,63,6,13,9,87,44,-17,-18,-3,3,1,31,15,0,-60,-36,8,3,72, 
  /* [3][0][][] */ -11,-10,-24,28,19,-17,-3,-14,-6,18,4,5,12,-10,47,-4,39,-41,8,6,-16,-9,-15,9,-11,11,0,-7,25,-45,48,-26,14,-10,-27,51,-10,-8,-9,4,12,-71,28,-24,-8,10,0,-1,-127,56,-28,17,-120,-54,-27,-42,26,7,-3,54,-8,27,7,12,-19,-89,-34,28,54,19,-6,41,-46,16,-5,-44,-47,-49,22,-44,18,-23,25,70,39,55,27,14,29,-4,-7,6,-29,-4,-2,-24, 
  /* [4][0][][] */ -9,-19,16,-63,0,-5,-41,12,-23,-27,-32,-15,19,68,18,13,45,-13,-2,9,-9,32,53,8,-13,-9,10,6,5,-11,-12,-5,-28,19,-9,10,38,-17,-1,-14,8,6,-89,-20,35,-5,-13,-16,-2,85,-22,-20,-23,-19,-8,-2,1,-25,26,36,9,6,10,-12,32,-107,15,-18,-37,23,-20,11,-21,11,-12,24,-20,54,50,-3,7,-4,127,-39,36,-23,-22,-9,69,15,1,17,-23,22,0,-38, 
  /* [5][0][][] */ -3,13,4,2,-17,11,5,124,54,-18,-18,-37,3,34,38,41,-11,-3,-10,-31,-53,-6,-1,-44,12,1,14,68,70,1,60,51,-41,29,-5,-6,-40,-48,-38,-21,-42,-15,-1,6,69,19,-1,9,5,17,-33,3,-35,-21,-12,-5,-17,-15,-9,41,-55,24,-14,-48,10,15,-22,12,7,24,3,12,21,4,19,-10,-4,28,6,118,-6,-51,39,28,-2,-10,13,-38,1,-11,27,-127,-28,-12,4,-109, 
  /* [6][0][][] */ -29,-3,-11,-58,-3,-20,-18,21,-3,11,-10,1,39,-68,2,-18,-2,-65,28,5,7,6,-11,24,85,-7,5,-2,18,-11,10,-24,-27,-4,-12,3,21,7,25,33,1,-26,-58,-18,-5,-21,33,-127,23,40,26,10,9,6,-10,-42,46,-15,-20,3,20,15,-4,5,43,75,38,-13,-20,-25,22,-38,28,4,54,-9,-27,39,3,4,-15,-2,48,-33,-9,47,29,-17,27,6,-37,-8,-21,-3,-12,18, 
  /* [7][0][][] */ 19,3,29,-23,-8,-3,-12,-21,1,-12,-9,-7,-16,-80,29,6,-9,-24,-14,-12,15,-14,-36,-2,-12,-5,5,-13,10,10,0,-3,-16,-6,-15,-10,-2,-7,-24,29,12,-19,-17,22,-12,14,-12,68,6,18,-12,-21,-27,9,0,-53,33,-12,0,5,-5,12,-15,-7,-20,37,11,-28,-17,-7,3,34,-2,-4,-9,12,47,12,-7,-23,8,-30,38,2,-30,127,1,5,-40,-20,-2,16,-16,-1,-8,5, 
  /* [8][0][][] */ -55,42,-49,3,37,7,-14,39,13,88,-42,4,15,43,67,-9,3,31,-72,15,13,27,-41,0,-39,-25,8,10,49,-89,0,-2,29,15,1,4,-11,26,-48,52,9,13,11,-127,-45,-1,36,-29,-56,28,-12,61,-110,70,13,-9,0,-24,-24,-11,0,-31,10,15,-22,31,23,-15,-6,12,33,89,-29,27,33,32,-11,-94,-3,-41,-13,-14,32,0,-53,-1,8,-47,4,45,-21,-3,38,-9,-9,-11, 
  /* [9][0][][] */ 30,-54,-25,-32,15,18,-24,23,23,-20,4,10,-46,-16,4,20,-4,8,28,-22,-13,12,-29,-37,39,10,23,-7,-27,-32,-25,-5,-14,10,16,36,1,46,-26,21,18,8,-18,-74,2,-7,21,-127,-36,-6,8,23,-20,5,-15,11,-46,20,-13,16,19,18,4,20,22,102,36,42,11,-13,12,-35,-6,9,-27,11,69,4,8,7,-5,1,13,-35,1,22,0,4,-51,34,-32,-2,12,9,-2,-14, 
  /* [10][0][][] */ 20,60,-23,35,62,-108,-17,-21,3,56,29,-5,-5,17,15,-77,25,48,-31,50,-94,-9,-12,-27,-82,-33,-54,47,-1,7,9,33,-10,-8,36,-18,93,-18,-22,-13,-18,63,46,-16,-54,-19,-45,5,-28,-18,-46,3,-11,-15,-5,-11,14,43,-26,-14,-4,15,-9,12,14,43,50,32,37,12,38,65,-57,-27,-51,-19,4,20,-24,0,38,-1,-63,-35,56,-61,96,-13,-16,23,29,-16,87,40,-2,-127, 
  /* [11][0][][] */ 50,43,-28,14,-9,21,51,17,1,-14,-19,-14,-2,4,39,7,-5,-11,-100,-8,6,14,-6,-10,-38,-22,-15,0,5,16,3,-6,-8,6,-4,27,7,12,-9,25,8,29,63,-100,23,-32,-4,-11,-127,17,-3,-53,20,19,-10,3,-20,-19,17,10,8,-9,-14,5,-53,52,-18,15,14,-2,23,26,-56,-21,22,33,-3,-37,-53,2,12,-10,95,48,10,-9,-18,-7,-2,29,-20,-2,1,13,-16,21, 
  /* [12][0][][] */ -27,1,18,0,-32,41,18,9,127,3,-13,-1,7,13,-35,-38,27,19,3,76,49,34,-16,-17,4,9,8,-30,-99,7,24,-34,10,1,-18,-15,18,3,43,-7,-48,-20,0,18,7,35,0,1,13,11,-54,6,1,-6,3,-3,70,-27,17,18,20,-17,4,-14,-3,28,-41,2,3,10,-23,-22,5,10,-64,3,30,-2,7,-65,-16,3,45,41,-14,-19,-34,-31,11,24,0,48,-9,-18,18,14, 
  /* [13][0][][] */ 30,-7,-22,25,27,-4,1,2,-2,8,10,0,10,-3,15,-9,13,-70,-42,13,-6,-18,6,5,14,11,-6,-6,-10,-30,-12,11,-2,10,-1,46,13,0,8,13,1,3,23,42,15,19,-14,-127,19,-6,0,4,-19,-1,17,5,-16,11,20,13,5,22,-11,-1,-10,-18,-17,-50,5,16,-6,-29,-8,36,-9,21,-28,2,12,-3,30,-12,-9,21,14,26,7,22,-8,7,19,-9,9,10,-9,-6, 
  /* [14][0][][] */ -120,-59,19,45,32,-34,-38,2,-16,7,-14,19,52,-3,-127,-7,75,-13,-8,21,-10,-11,34,15,-105,7,39,-10,-43,-72,-23,-8,-6,-5,31,-68,23,28,3,20,26,33,-11,-41,12,111,79,55,-102,40,25,35,-42,2,39,-7,3,10,62,49,37,50,4,46,-6,-14,-36,37,-1,68,-49,-99,-67,0,-12,43,-13,36,86,7,58,23,22,31,46,17,52,33,20,33,61,-6,-5,15,16,-34, 
  /* [15][0][][] */ 98,-18,33,9,1,72,39,-9,-21,53,2,1,-85,-2,-15,34,9,48,51,-4,6,26,-80,64,17,5,43,-1,21,36,-54,-71,20,-45,41,2,45,-34,-64,-108,-11,37,3,42,4,59,-30,-43,99,-37,-55,19,39,-127,58,-102,-1,-69,16,27,-118,-1,23,17,82,-20,-53,52,-25,88,-25,36,31,21,20,2,23,-51,67,-12,-15,-1,44,76,-18,-8,-9,-56,12,6,76,-7,-57,57,32,-13, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.016980778425931931, 0.010271815583109856, 0.01224747858941555, 0.011153356172144413, 0.016807183623313904, 0.012512063607573509, 0.01236899197101593, 0.018178565427660942, 0.0094110835343599319, 0.010896871797740459, 0.014948504976928234, 0.029596220701932907, 0.01886824332177639, 0.020562214776873589, 0.019492670893669128, 0.010707399807870388, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 9265, -9260, 2982, 49335, -1573, -4477, -11232, 1856, -2537, 1336, 2738, -1959, 1422, -6837, 6013, -5145, -1584, 16288, 27954, 1995, 3412, -2200, 322, 152, 17094, -1120, -1250, -3862, -5967, -7554, 5298, -9545, -769, -624, 279, 11525, 1513, -4198, 18849, 1205, -79, 1870, -9766, -7940, -7579, 66553, 965, 14277, 30464, -12631, 228, 9421, 7504, -429, -5578, 2515, -12452, 2061, 2186, -7277, -2018, -817, -12440, -811, 1321, 16143, 28981, 25699, -11740, 566, -8389, -184, 61541, 9420, -222, 602, 18284, 32813, -475, -4082, -1784, -3124, 931, -3436, 833, 1041, 1232, -815, 2269, -2952, 153, -370, 106, -436, 48, 50579, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020233419490978122, 9.7596792329568416e-05, 0.00025119728525169194, 4.256148895365186e-05, 0.00016899954061955214, 0.0001660542911849916, 0.00032320781610906124, 8.2594189734663814e-05, 0.00015209938283078372, 0.00045887421583756804, 0.0001540246739750728, 0.00029169578920118511, 9.1763889940921217e-05, 0.00038150598993524909, 0.00016757554840296507, 0.00014834251487627625, 0.00010513827874092385, 0.00028724400908686221, 5.2382278227014467e-05, 0.00030996231362223625, 4.3228297727182508e-05, 0.00017567910254001617, 0.00011429822916397825, 0.00037055328721180558, 0.00020515864889603108, 0.0002441099495626986, 0.0001277789706364274, 0.00016893753490876406, 0.00011670615640468895, 0.0001143470944953151, 0.00015179293404798955, 0.00016385719936806709, 0.00012149439862696454, 0.00013745043543167412, 0.00024882444995455444, 0.00019685849838424474, 0.00043734611244872212, 0.00011039258242817596, 5.667113873641938e-05, 0.00011190529039595276, 0.00020762230269610882, 0.00036024636938236654, 0.00036317226476967335, 0.00015786469157319516, 0.00017470082093495876, 4.4595832150662318e-05, 0.00018667022231966257, 0.00023949569731485099, 8.6298052337951958e-05, 0.00018637497851159424, 0.00021361368999350816, 0.00013180063979234546, 0.00022932964202482253, 0.00029925754643045366, 0.00028928232495673001, 0.00041531925671733916, 0.00029788078973069787, 0.00022469503164757043, 0.00011573106166906655, 8.4906765550840646e-05, 0.00030276674078777432, 0.00015180390619207174, 0.00028406275669112802, 0.00013998478243593127, 0.00022155599435791373, 0.00017795905296225101, 7.6211814302951097e-05, 6.9693523983005434e-05, 0.0003653127932921052, 0.00030372242326848209, 0.00020561534620355815, 7.9813333286438137e-05, 9.3415001174435019e-05, 0.00015086987696122378, 0.0001456788886571303, 0.00027293615858070552, 0.00050245912279933691, 5.0279766583116725e-05, 0.00026327621890231967, 0.00049316283548250794, 0.00016612117178738117, 0.00065133837051689625, 0.00011062350677093491, 0.00018610329425428063, 0.00013521176879294217, 9.591831621946767e-05, 0.00014261415344662964, 0.00017227536591235548, 0.00019273559155408293, 0.00010612108599161729, 0.00022787612397223711, 0.00011668877414194867, 0.00013515693717636168, 0.00040532814455218613, 0.025619221851229668, 7.4680137913674116e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,6,-20,106,-17,23,-62,-52,18,-6,100,-10,4,-7,-5,55,5,15,-36,3,73,2,32,-33,2,17,44,48,22,13,23,48,-5,28,11,-14,5,49,-54,-25,19,10,26,17,-84,-56,24,-5,-11,-19,-7,-7,49,6,-9,2,-3,-37,27,-30,27,-2,127,27,-13,-10,10,-52,65,35,3,-7,79,-32,69,4,17,-127,30,63,1,15,127,-14,37,28,-29,-19,34,-6,-14,82,2,20,-2,13, -49,12,-8,10,52,-9,-11,-127,39,13,-127,-5,-16,-13,4,92,19,-30,-16,-16,76,-97,127,26,-62,-30,-106,-17,29,36,-49,17,122,13,-12,0,-23,127,-58,-127,8,-18,-31,13,46,-127,127,-44,-77,51,50,6,39,-63,31,56,36,42,-103,84,127,35,4,-21,42,-37,-98,0,36,-30,-19,44,-49,-48,105,-4,-29,-58,-32,63,-66,63,-15,9,-11,47,55,-40,-28,54,-13,73,-127,-31,23,-127, 0,-4,-23,-75,8,18,37,21,-3,-2,6,61,1,-12,-11,6,-12,16,-18,17,6,24,23,-32,1,-30,10,11,-6,5,45,-79,46,17,10,-22,13,4,-26,-20,7,3,-16,8,21,-31,21,1,6,-7,6,-6,5,6,-6,8,-8,45,5,-2,11,-18,3,-17,-26,-17,30,-49,-107,-7,41,-18,-127,-24,-11,17,11,-10,6,11,-13,23,-36,-4,-40,20,27,36,-25,-16,25,-11,19,7,-2,-46, 
  /* [0][1][][] */ -40,59,-18,37,-85,-15,-9,-42,25,95,-45,-22,-32,-24,-6,63,127,-24,-91,-13,60,-127,-30,16,-36,-47,-127,-6,37,36,-50,27,-127,-75,-55,4,65,-3,-54,47,-20,87,0,-4,35,-53,-13,-31,127,45,-3,19,44,10,-37,-17,30,8,-126,127,-36,-89,21,127,-59,-35,-85,125,-37,127,-18,55,-36,-54,38,8,-35,-70,127,47,127,35,7,-1,127,29,-97,48,-38,-35,-102,41,98,102,28,-60, 127,127,127,127,-46,-127,127,24,127,-127,17,-127,-108,127,127,127,-15,-127,-63,-127,127,22,-68,127,127,127,-56,-127,127,127,-127,127,-8,-127,-123,127,-127,-44,93,110,-127,-127,127,127,127,-119,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-44,41,-104,-28,-69,-67,127,127,-71,127,127,-107,-127,127,-41,127,-127,-127,-127,124,-75,127,-42,127,81,127,-38,-127,-25,-106,-127,-126,-23,-127,-23,-127,-127,118, -23,64,-37,1,127,71,-22,50,4,23,-13,-5,-27,-30,-13,-8,-102,-22,-127,39,32,77,-13,-116,-34,-40,123,74,9,34,71,8,127,-47,127,-3,55,6,-95,15,35,24,-23,0,-23,-53,-13,-42,81,16,-12,38,-6,-3,-75,-15,23,20,127,-88,3,127,1,-35,-109,-28,-73,99,15,-17,112,27,-18,-55,13,47,-28,-7,-43,-2,-46,7,48,24,-90,35,127,-46,31,-22,127,-10,-115,35,33,18, 
  /* [0][2][][] */ -4,-39,-21,-62,-4,15,41,34,-2,9,-20,50,23,-35,-7,7,41,4,14,22,-9,31,-17,-26,1,-25,9,3,-10,-7,49,-75,-38,66,-27,-25,31,-35,-65,17,10,10,-34,21,12,-79,-13,-1,-9,5,17,-8,7,2,-22,5,0,44,-48,35,-5,-13,5,17,-6,-10,24,-54,-56,11,-21,-8,-120,-31,0,17,14,-12,56,17,22,22,-39,15,12,26,-20,10,4,25,23,-7,19,40,-7,-29, -28,-10,-26,23,-45,75,-23,68,5,-6,54,-12,127,-8,-18,-17,-1,-38,-56,25,-23,79,-44,-112,-47,-47,101,69,13,44,54,-1,-123,62,-14,-22,-29,-26,-127,-4,45,-14,-14,38,-27,-44,-19,-47,-61,27,69,24,-10,-79,30,51,19,26,77,-53,21,-58,-8,0,19,-26,-127,-55,-11,-27,-63,27,36,-45,-31,-7,-45,23,-56,1,49,35,19,10,5,63,-91,127,14,127,-31,-19,115,-22,46,85, -9,-34,-25,29,12,66,-42,14,4,-7,0,13,12,-51,-9,-13,-42,-5,19,20,-25,5,-21,3,-4,20,-3,51,-3,-7,34,30,18,41,21,-22,-6,-26,-33,8,12,-11,23,11,-74,-32,-14,5,-2,-17,0,-5,-8,9,-17,-5,0,-50,15,-28,-20,49,9,-28,-10,-2,36,-55,46,7,54,-17,31,-54,-19,22,11,11,-6,22,-30,32,90,-15,-17,55,39,-8,107,12,2,-20,9,-22,-7,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0085992030799388885, 0.0041478634811937809, 0.0106758838519454, 0.0018088632496073842, 0.007182480301707983, 0.0070573072880506516, 0.013736331835389137, 0.0035102530382573605, 0.0064642233774065971, 0.019502153620123863, 0.0065460484474897385, 0.012397070415318012, 0.0038999652024358511, 0.016214003786444664, 0.0071219606325030327, 0.0063045569695532322, 0.0044683767482638359, 0.012207870371639729, 0.0022262467537075281, 0.01317339763045311, 0.0018372025806456804, 0.0074663618579506874, 0.0048576747067272663, 0.015748513862490654, 0.0087192421779036522, 0.010374672710895538, 0.0054306061938405037, 0.0071798451244831085, 0.0049600116908550262, 0.0048597515560686588, 0.0064511997625231743, 0.0069639305584132671, 0.0051635117270052433, 0.0058416435495018959, 0.010575039312243462, 0.008366486057639122, 0.018587209284305573, 0.0046916846185922623, 0.0024085233453661203, 0.0047559747472405434, 0.0088239479809999466, 0.015310470014810562, 0.015434821136295795, 0.0067092492245137691, 0.0074247848242521286, 0.0018953228136524558, 0.0079334843903779984, 0.010178566910326481, 0.0036676670424640179, 0.007920936681330204, 0.0090785818174481392, 0.0056015271693468094, 0.0097465096041560173, 0.012718445621430874, 0.012294498272240162, 0.017651068046689034, 0.012659933418035507, 0.0095495386049151421, 0.004918570164591074, 0.0036085373722016811, 0.012867585755884647, 0.0064516658894717693, 0.012072667479515076, 0.0059493533335626125, 0.0094161294400691986, 0.0075632594525814056, 0.0032390020787715912, 0.0029619745910167694, 0.01552579365670681, 0.012908202596008778, 0.0087386518716812134, 0.0033920665737241507, 0.0039701373316347599, 0.0064119696617126465, 0.0061913528479635715, 0.011599786579608917, 0.021354511380195618, 0.0021368900779634714, 0.011189239099621773, 0.020959420129656792, 0.007060149684548378, 0.027681879699230194, 0.0047014988958835602, 0.0079093901440501213, 0.0057465001009404659, 0.004076528362929821, 0.0060611013323068619, 0.0073217027820646763, 0.0081912623718380928, 0.0045101461000740528, 0.0096847349777817726, 0.0049592726863920689, 0.0057441694661974907, 0.0172264464199543, 1.0888168811798096, 0.0031739058904349804, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 17694, 836, 8526, -663, 4914, 4568, 14334, 4814, -1453, 21610, 5031, 1016, 6353, 36739, -337, -2184, 9523, 10600, 1767, -184, -617, 15620, 4083, 3302, 7711, 5179, 4463, 4216, 104, 37, 7140, 7633, 13241, 1311, 8022, -597, 18623, 6152, 798, 3965, 922, 10588, 12397, 4971, 2843, 12674, 12186, 5709, 4359, 3182, 365, -406, 18348, 5789, 7767, 12846, -235, 7138, 3062, 3409, 11883, 7519, 2921, 5430, 5872, 3498, 6304, -809, 15877, 8784, 8442, -961, -1154, 2841, 1731, 2626, 20152, 14181, 12060, -3114, 5478, -4755, -1594, 552, 5269, 4668, 7012, 4586, 10987, 4216, 8295, 3264, 15404, 18423, -9970, 13636, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014715416182298213, 0.00037666404386982322, 0.00015993237320799381, 0.00079773284960538149, 0.00032633103546686471, 0.0001982208777917549, 0.00021739715884905308, 0.00071804213803261518, 0.00031996524194255471, 8.3798484411090612e-05, 0.000282267079455778, 0.00080963777145370841, 0.0004316829435992986, 0.00013174988271202892, 0.00035209438647143543, 0.00031803891761228442, 0.00023320097534451634, 0.00021719324286095798, 0.00024859706172719598, 0.00065152457682415843, 0.00040252311737276614, 0.00015747295401524752, 0.0003749208408407867, 0.00023793434957042336, 0.0002313528093509376, 0.00040170637657865882, 0.00032478454522788525, 0.00021796865621581674, 0.00063553190557286143, 0.00038609679904766381, 0.00019978755153715611, 0.00024803029373288155, 0.00014638839638791978, 0.00083293940406292677, 0.00020652360399253666, 0.00043093753629364073, 0.00012263825919944793, 0.0004299338033888489, 0.00060156121617183089, 0.0002371119917370379, 0.00054134969832375646, 0.00017765296797733754, 0.00017424245015718043, 0.00015112504479475319, 0.00039913589716888964, 0.0002564821916166693, 0.00023127636814024299, 0.00025103797088377178, 0.00036279181949794292, 0.00027424981817603111, 0.00041058461647480726, 0.0014816956827417016, 0.00014446023851633072, 0.00027216388843953609, 0.00030184988281689584, 0.00014585525786969811, 0.00045172142563387752, 0.00024198662140406668, 0.00025701054255478084, 0.00047126904246397316, 0.00014447134162764996, 0.00018654830637387931, 0.00034842273453250527, 0.00050843344070017338, 0.000177931142388843, 0.00032632544753141701, 0.00030620029428973794, 0.0004314184479881078, 0.0001701816072454676, 0.00013181187387090176, 0.00023584646987728775, 0.0005123048322275281, 0.00031381932785734534, 0.0004630621406249702, 0.00024239094636868685, 0.00048166487249545753, 0.00011646699567791075, 0.00031793073867447674, 0.00013852110714651644, 0.00038480473449453712, 0.00019606783462222666, 0.00043085860670544207, 0.00024411892809439451, 0.00046278708032332361, 0.00030110208899714053, 0.00032952785841189325, 0.00023405907268170267, 0.00029835017630830407, 0.00015410706691909581, 0.00037358497502282262, 0.00016793704708106816, 0.00051590160001069307, 0.00013729027705267072, 0.00015036636614240706, 0.00029582070419564843, 0.00024196962476707995, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 29,6,113,121,69,-32,19,-51,127,6,-52,-54,45,65,-35,-105, 
  /* [1][0][][] */ 9,82,-25,-21,77,-35,5,10,56,45,-17,127,-3,-34,120,-86, 
  /* [2][0][][] */ 21,-63,15,-9,-58,49,-64,99,-90,-111,9,69,-3,-127,68,-79, 
  /* [3][0][][] */ 127,113,1,38,-123,-13,-80,-28,7,-13,117,-81,-61,98,-54,-50, 
  /* [4][0][][] */ -1,-6,14,7,-33,27,-15,46,-62,-36,3,-8,-2,-127,36,2, 
  /* [5][0][][] */ 121,-49,-23,-4,-21,-127,-36,17,-2,2,-114,-8,14,2,-10,36, 
  /* [6][0][][] */ -127,-79,4,93,-61,-8,-62,18,-108,-81,-77,-22,6,70,6,73, 
  /* [7][0][][] */ -7,11,-64,40,43,-127,-30,35,13,-34,5,-6,-4,21,-41,11, 
  /* [8][0][][] */ 42,-46,-14,-6,2,22,-75,-63,-5,8,-85,17,-127,6,-1,34, 
  /* [9][0][][] */ 21,-46,53,113,7,20,-21,-82,127,-103,5,-17,2,52,-70,24, 
  /* [10][0][][] */ -127,-50,-7,-55,117,54,45,67,95,-68,-74,44,81,-90,-99,61, 
  /* [11][0][][] */ 43,-16,-127,20,52,20,-17,34,-12,-33,-16,1,3,20,-37,9, 
  /* [12][0][][] */ 112,-36,-6,14,-13,-61,-44,-19,46,10,-127,-5,-37,-17,14,66, 
  /* [13][0][][] */ 22,-66,19,-58,85,10,-127,-114,45,-87,2,-6,16,-35,21,-20, 
  /* [14][0][][] */ -44,43,-99,-37,70,-127,51,-55,55,59,-18,-73,18,104,2,20, 
  /* [15][0][][] */ 27,8,60,42,40,-49,-47,-11,21,-70,-79,-4,-127,-51,-14,62, 
  /* [16][0][][] */ -125,73,10,13,7,106,38,67,-13,20,127,3,-7,-2,12,-49, 
  /* [17][0][][] */ 3,2,-37,-21,-29,15,41,78,-9,127,-28,21,1,89,56,5, 
  /* [18][0][][] */ 3,127,-64,-5,-13,-9,59,-61,33,109,-49,121,1,-48,44,-72, 
  /* [19][0][][] */ 9,-13,34,23,3,44,-6,15,21,11,-49,-2,-127,3,-6,29, 
  /* [20][0][][] */ 84,-68,-6,-90,-30,30,20,-90,-66,20,-127,-50,28,-6,50,7, 
  /* [21][0][][] */ 46,-9,127,54,-30,58,30,4,3,34,-16,-20,-14,83,1,-16, 
  /* [22][0][][] */ 20,-8,20,20,-18,-12,14,127,34,-15,11,23,12,57,35,29, 
  /* [23][0][][] */ -15,14,-77,27,22,-127,9,36,-1,-33,-8,-8,-62,14,-10,47, 
  /* [24][0][][] */ 35,-54,1,-48,61,3,-32,-12,41,18,60,91,-34,77,127,40, 
  /* [25][0][][] */ -127,-125,-37,35,20,17,32,-30,-51,1,-91,20,17,57,39,75, 
  /* [26][0][][] */ 4,5,47,4,-13,22,-31,61,-78,-51,-2,11,13,-127,30,-22, 
  /* [27][0][][] */ -97,31,-41,25,33,-19,-6,23,29,-38,127,18,-22,10,-13,-20, 
  /* [28][0][][] */ -13,1,23,40,-2,6,12,89,32,20,-29,2,-127,-6,-17,44, 
  /* [29][0][][] */ -8,70,49,-33,45,-12,17,-22,-127,31,-38,11,7,45,-99,22, 
  /* [30][0][][] */ -5,-18,-127,-44,27,-73,-9,17,-21,-25,-5,-31,-47,-13,4,35, 
  /* [31][0][][] */ 127,-26,-125,16,42,5,-69,67,-11,-15,-83,-49,20,-8,-100,23, 
  /* [32][0][][] */ -127,39,37,50,12,88,17,34,27,-5,124,2,-31,28,-12,-16, 
  /* [33][0][][] */ 15,-9,127,-21,-68,23,14,-38,0,11,-9,19,-3,24,41,28, 
  /* [34][0][][] */ -40,-28,-67,-123,27,-2,-14,-52,-35,-72,-23,-127,-9,6,51,15, 
  /* [35][0][][] */ 1,-33,36,51,56,-22,27,-16,-112,50,-1,32,-20,127,-35,-43, 
  /* [36][0][][] */ -116,52,-28,4,-11,39,37,97,5,18,127,-14,2,29,16,-15, 
  /* [37][0][][] */ -33,16,127,-36,-70,-67,16,-41,24,12,-10,-6,-5,-57,56,14, 
  /* [38][0][][] */ 25,-13,-6,34,41,-52,-80,14,-12,-41,54,-6,127,38,-16,16, 
  /* [39][0][][] */ -10,-33,13,-45,-47,-64,77,127,-47,2,17,-50,-6,44,52,53, 
  /* [40][0][][] */ 57,4,-23,-5,-5,90,-8,14,16,5,22,9,127,4,-23,-33, 
  /* [41][0][][] */ -3,-9,-29,-127,42,6,-45,-86,-1,-54,11,-35,-4,-24,-20,36, 
  /* [42][0][][] */ 57,43,14,109,-105,-2,-114,6,-74,-69,49,-71,-40,127,-52,9, 
  /* [43][0][][] */ 16,112,-34,127,23,22,45,-78,-43,85,-1,22,8,-54,50,36, 
  /* [44][0][][] */ -9,-13,-127,29,49,86,-35,57,-7,-18,36,-10,13,-24,-49,-2, 
  /* [45][0][][] */ -4,21,-19,-127,-27,-10,51,3,-24,33,-29,24,3,-73,45,-22, 
  /* [46][0][][] */ 3,46,48,-8,5,6,-63,55,30,-61,-13,27,25,127,59,-7, 
  /* [47][0][][] */ 11,-28,30,-44,-35,24,-77,59,-14,-43,19,25,9,-127,35,22, 
  /* [48][0][][] */ 8,-8,9,-127,-14,-17,0,11,15,-33,8,-14,8,50,-12,63, 
  /* [49][0][][] */ 23,-20,-7,117,89,14,13,51,-57,32,34,50,-13,36,127,-20, 
  /* [50][0][][] */ -34,-6,61,-19,14,122,-18,-62,44,-7,127,45,110,-20,2,-92, 
  /* [51][0][][] */ 21,39,7,7,11,-9,-43,23,38,-6,2,127,-5,30,41,-55, 
  /* [52][0][][] */ -45,88,126,-6,9,-57,18,-63,-41,12,1,60,-12,114,-127,-36, 
  /* [53][0][][] */ 2,-24,-35,-127,-39,2,13,-34,-22,32,15,-7,10,-15,41,10, 
  /* [54][0][][] */ 13,12,-22,-43,26,15,-18,8,65,-28,2,-34,-7,127,15,29, 
  /* [55][0][][] */ -4,-20,-43,-1,18,-42,-7,-127,17,-78,-4,4,-20,-71,-31,-15, 
  /* [56][0][][] */ 34,43,31,52,7,-30,12,127,20,-32,5,-29,82,-2,-49,35, 
  /* [57][0][][] */ 88,-10,127,-18,-83,-63,-3,-31,37,-4,-110,47,81,-37,71,37, 
  /* [58][0][][] */ 97,87,3,109,-127,-15,9,48,-19,41,84,-21,-67,-67,-16,-81, 
  /* [59][0][][] */ 123,-36,-16,2,-16,-3,-2,2,-26,29,-127,-3,11,-12,16,35, 
  /* [60][0][][] */ -127,41,-17,0,13,5,9,22,14,-1,90,9,-26,6,9,-11, 
  /* [61][0][][] */ -114,71,15,13,23,-13,-97,-78,127,-98,82,-16,66,-54,-97,-59, 
  /* [62][0][][] */ -24,-64,-127,90,81,109,1,107,48,-63,49,-35,-95,15,-124,-22, 
  /* [63][0][][] */ -40,9,127,-38,-52,-52,26,-28,9,13,4,10,-19,-57,73,9, 
  /* [64][0][][] */ 23,73,-13,28,60,5,84,-127,-23,109,13,-39,-8,-122,-8,50, 
  /* [65][0][][] */ 9,12,19,-14,70,12,10,-127,-26,-54,-16,-49,-12,-36,42,17, 
  /* [66][0][][] */ -127,9,-19,6,-37,18,17,-35,-76,-33,-73,57,56,21,50,88, 
  /* [67][0][][] */ -14,-65,10,127,6,-11,-35,41,67,23,18,-32,-14,-33,-108,-31, 
  /* [68][0][][] */ 6,-4,-4,127,-53,-24,-17,-33,-64,30,18,-29,-37,-70,-34,-66, 
  /* [69][0][][] */ 84,92,27,124,55,-5,57,-127,20,103,18,66,7,-26,22,-5, 
  /* [70][0][][] */ 26,-20,13,-102,127,-42,35,6,72,-29,53,-60,13,98,53,97, 
  /* [71][0][][] */ 4,51,-3,68,33,-127,-52,71,25,-97,7,13,5,-54,-48,33, 
  /* [72][0][][] */ -127,-73,-15,44,17,36,-35,18,-46,-39,-81,34,51,9,12,78, 
  /* [73][0][][] */ -25,-25,-17,56,12,-22,3,-6,82,13,7,1,29,127,-55,-58, 
  /* [74][0][][] */ 81,-34,28,-23,-33,-20,27,-21,-30,-16,-123,35,-127,-4,22,50, 
  /* [75][0][][] */ -17,-16,-19,127,-34,9,-6,-17,-57,18,-19,-27,2,-44,-19,-30, 
  /* [76][0][][] */ 4,5,1,55,51,20,-14,-127,24,-117,3,32,-20,-15,27,-40, 
  /* [77][0][][] */ 127,-24,30,53,-36,4,-41,-13,47,-9,-38,53,42,11,-48,42, 
  /* [78][0][][] */ -5,3,53,7,9,-2,-60,31,52,-31,-31,-24,2,127,16,-30, 
  /* [79][0][][] */ 1,20,56,25,47,69,-51,-52,21,-49,73,-11,127,-18,-37,-39, 
  /* [80][0][][] */ -127,-82,-84,124,11,38,40,-13,-99,32,-103,7,51,-94,-20,43, 
  /* [81][0][][] */ 43,-1,-76,17,127,83,-30,-37,-10,-111,0,-109,-59,-35,-88,37, 
  /* [82][0][][] */ 119,120,-13,27,-127,-26,-67,-7,-67,-1,86,-31,-45,83,20,-19, 
  /* [83][0][][] */ 127,41,14,-26,7,-20,-9,33,41,14,90,-22,-56,-22,-21,-78, 
  /* [84][0][][] */ 13,-61,-45,-18,55,35,-6,-127,-26,-54,18,17,-12,0,-10,-4, 
  /* [85][0][][] */ -30,3,-46,-41,0,0,72,72,-6,127,1,-38,35,51,60,-32, 
  /* [86][0][][] */ 113,-28,11,1,13,-36,-10,-25,12,-2,-127,4,24,25,-3,28, 
  /* [87][0][][] */ -15,43,9,-25,-5,67,-16,52,-1,-15,22,19,11,-127,6,-2, 
  /* [88][0][][] */ 23,-36,-83,-36,80,-5,-56,-127,24,-56,-10,-38,-48,15,6,-10, 
  /* [89][0][][] */ 18,-13,31,-127,54,9,-63,110,100,-74,32,8,-6,57,36,47, 
  /* [90][0][][] */ -4,4,-33,68,80,-1,117,-92,81,127,-37,50,16,10,-10,-9, 
  /* [91][0][][] */ 32,-3,-43,-6,6,-127,-22,-12,1,-12,-42,-1,38,-9,2,24, 
  /* [92][0][][] */ 30,19,127,70,41,20,15,63,-45,43,-77,47,30,85,3,4, 
  /* [93][0][][] */ 127,-35,-29,-15,-19,-54,5,40,-17,33,-125,-1,7,21,-4,60, 
  /* [94][0][][] */ 12,-17,61,92,127,-28,-18,49,15,-24,-1,65,-1,124,-34,-86, 
  /* [95][0][][] */ -117,40,45,31,28,50,22,10,4,8,127,-6,-25,29,-18,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00044181628618389368, 0.0011308977846056223, 0.00048018162488006055, 0.0023951164912432432, 0.00097977765835821629, 0.00059513922315090895, 0.00065271416679024696, 0.0021558527369052172, 0.00096066505648195744, 0.0002515969390515238, 0.00084747991058975458, 0.0024308599531650543, 0.0012960867024958134, 0.00039556639967486262, 0.0010571297025308013, 0.00095488136867061257, 0.00070016359677538276, 0.00065210193861275911, 0.00074638891965150833, 0.0019561401568353176, 0.0012085371417924762, 0.00047279748832806945, 0.001125663984566927, 0.00071437511360272765, 0.00069461466046050191, 0.0012060849694535136, 0.00097513454966247082, 0.00065443001221865416, 0.0019081237260252237, 0.0011592187220230699, 0.00059984298422932625, 0.00074468721868470311, 0.00043951717088930309, 0.0025008209049701691, 0.00062006735242903233, 0.0012938487343490124, 0.00036820961395278573, 0.0012908350909128785, 0.0018061299342662096, 0.00071190606104210019, 0.0016253506764769554, 0.00053338601719588041, 0.00052314630011096597, 0.00045373846660368145, 0.0011983673321083188, 0.00077006319770589471, 0.00069438514765352011, 0.00075371743878349662, 0.001089247758500278, 0.0008234088309109211, 0.0012327410513535142, 0.0044486494734883308, 0.00043372804066166282, 0.00081714603584259748, 0.00090627535246312618, 0.00043791646021418273, 0.0013562503736466169, 0.00072654167888686061, 0.00077164958929643035, 0.0014149402268230915, 0.00043376136454753578, 0.00056009343825280666, 0.0010461058700457215, 0.0015265227993950248, 0.00053422123892232776, 0.00097976089455187321, 0.00091933703515678644, 0.0012952926335856318, 0.00051095400704070926, 0.00039575251867063344, 0.00070810643956065178, 0.0015381461707875133, 0.00094221252948045731, 0.0013902997598052025, 0.00072775559965521097, 0.0014461526880040765, 0.0003496810095384717, 0.00095455662813037634, 0.00041589638567529619, 0.0011553394142538309, 0.00058867491316050291, 0.0012936117127537727, 0.00073294370668008924, 0.0013894739095121622, 0.00090403022477403283, 0.00098937586881220341, 0.00070273998426273465, 0.00089576782193034887, 0.00046269173617474735, 0.0011216531274840236, 0.00050421489868313074, 0.0015489452052861452, 0.00041220092680305243, 0.00045146062620915473, 0.00088817335199564695, 0.0007264906307682395, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -39800, 3767, -491, -7487, -1110, -11261, -10690, -39898, 4348, 25065, 30683, -6457, -4692, -22534, 47368, -45080, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00069919793168082833, 0.00080940837506204844, 0.00080530345439910889, 0.0010613873600959778, 0.00088866055011749268, 0.001008903025649488, 0.0011547452304512262, 0.00070150947431102395, 0.00071445805951952934, 0.00061280472436919808, 0.0010293317027390003, 0.00070363242411985993, 0.0010703786974772811, 0.0016795597039163113, 0.00041899463394656777, 0.00076152663677930832, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,0,-24,6,21,1,2,108,-52,18,44,-9,14,-13,-13,13,10,-16,-12,-7,60,-4,16,124,-17,89,-3,-12,28,-13,24,-25,-14,49,23,-49,17,44,21,-15,-110,-23,24,40,39,23,-127,-48, 
  /* [1][0][][] */ -33,-13,19,12,-35,11,4,56,-51,-36,6,-46,-23,-19,3,-2,-27,117,-12,14,6,11,-29,-17,27,-43,15,22,-23,-83,-37,22,-19,-7,33,1,-1,-38,0,15,-20,-32,127,13,11,2,23,-10, 
  /* [2][0][][] */ -24,-4,-11,-37,-5,-62,2,-18,2,15,18,27,13,17,-15,5,-5,-21,-28,-11,-5,2,-3,-127,-12,77,-11,7,2,-17,-4,-8,-4,53,13,-5,24,8,29,-2,-42,6,-16,-9,3,-13,13,11, 
  /* [3][0][][] */ -7,34,4,-29,0,1,0,-7,-18,-4,1,39,-127,5,-3,-6,0,5,-17,-1,-28,8,2,16,-4,-12,4,23,-8,17,6,13,6,3,17,18,-10,25,38,4,12,5,27,-29,11,-8,7,18, 
  /* [4][0][][] */ 34,-29,13,10,17,30,19,-22,-27,4,-10,-17,-1,13,0,12,25,-5,-79,7,-5,12,11,70,8,-27,7,49,11,-73,20,6,17,-34,33,-127,13,33,0,15,-18,19,12,-25,-9,-22,11,6, 
  /* [5][0][][] */ 28,5,-17,63,-4,-3,3,27,6,-3,45,14,0,55,0,-3,-26,21,27,4,10,7,-2,-23,6,-51,4,-18,-1,-7,4,4,72,-127,7,29,-13,-16,17,1,-89,60,25,-7,-2,-5,-99,-6, 
  /* [6][0][][] */ 26,0,5,3,-13,-7,0,-14,-3,5,-1,7,-19,9,5,4,0,-14,127,4,6,10,18,-34,4,7,26,-13,-12,0,-4,5,0,-14,32,-40,2,-41,69,15,-5,-8,-6,6,-7,2,4,-6, 
  /* [7][0][][] */ -36,-15,-6,37,-5,72,-8,41,2,28,-10,127,78,-6,-6,-4,-3,-17,-4,-14,-24,-5,-14,68,2,-38,-49,-32,-9,-15,-11,-10,-2,6,-26,8,9,-56,89,-1,26,21,-62,-53,16,-8,6,1, 
  /* [8][0][][] */ -47,-51,2,3,-8,2,-6,34,-6,-69,3,41,52,7,6,0,-9,73,-34,5,-53,25,-8,-10,1,1,7,48,-4,118,-6,19,-6,8,-27,-127,-118,73,35,25,28,-11,121,-23,16,29,19,36, 
  /* [9][0][][] */ -24,9,-2,32,20,-42,-10,-1,56,-41,9,63,-60,8,19,-3,-6,21,-37,-23,59,12,-9,-10,-5,11,53,-29,10,15,10,-8,-10,23,81,-111,-7,-127,-100,10,-31,23,63,12,12,5,-21,-40, 
  /* [10][0][][] */ -23,-7,-33,-127,39,88,8,-9,0,33,26,9,44,-44,-30,18,29,-45,48,-37,28,-20,34,47,-43,-107,5,-29,47,33,41,-42,-26,-82,27,-9,20,-45,8,-35,-37,-60,-11,8,12,14,19,-30, 
  /* [11][0][][] */ 2,49,-1,70,40,-65,-82,-21,4,67,-24,7,-2,51,3,-82,27,56,12,-6,-48,-108,17,10,17,-50,18,-21,58,-41,36,-87,35,-6,-47,-79,84,29,-4,-127,10,55,99,-59,-3,-52,37,29, 
  /* [12][0][][] */ 124,0,-11,17,-1,22,1,101,24,-12,-56,-20,-3,12,-7,-7,-8,4,-3,-1,8,4,-2,19,2,10,-1,4,-7,10,-2,-1,6,-67,-5,7,-13,-19,-28,-1,-14,-75,10,-127,-53,-14,84,-6, 
  /* [13][0][][] */ 13,6,2,7,6,-10,-4,0,-1,6,3,24,-5,3,5,-4,8,4,13,5,16,-11,11,0,3,-1,21,127,12,-3,6,-5,2,3,-40,20,9,-2,5,-16,-11,-6,4,7,1,-3,-9,-10, 
  /* [14][0][][] */ 66,-30,42,-74,56,22,48,-105,-59,-59,-7,119,-67,-3,67,23,51,17,-55,65,17,12,79,-21,20,59,-42,-122,23,-38,58,51,-13,66,-127,-55,-46,49,87,15,-43,9,48,4,-5,6,12,-29, 
  /* [15][0][][] */ -9,-47,-77,-41,54,32,74,-47,-14,25,-15,-38,80,25,-108,60,59,51,76,-79,-105,-25,53,-19,-98,49,34,60,54,56,45,-40,25,59,94,127,-17,-107,-5,-37,92,55,122,-56,1,-30,-20,69, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029715912416577339, 0.034399855881929398, 0.034225396811962128, 0.045108962804079056, 0.037768073379993439, 0.042878378182649612, 0.04907667264342308, 0.029814152047038078, 0.030364466831088066, 0.026044201105833054, 0.043746598064899445, 0.029904376715421677, 0.045491095632314682, 0.071381285786628723, 0.017807271331548691, 0.032364882528781891, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 2236, 36949, -1231, 58012, 5314, 124131, -1344, 42016, 4716, 31555, 23345, 4514, 5123, 26810, -171, -1801, -624, 3092, 3038, -2181, 1332, -3305, -1542, -18139, -4612, 43714, 128307, 104951, 3321, 2712, -2111, 410, 23062, 1031, 40805, 9803, 41698, 1481, 53281, 2545, 2722, 56168, 288, 3559, 50492, 74, 3395, 42440, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.2312239101156592e-05, 3.2770189136499539e-05, 0.00017831110744737089, 4.255075691617094e-05, 0.00012152604904258624, 7.0362759288400412e-05, 0.00017665515770204365, 0.0001423162902938202, 7.2264127084054053e-05, 3.7698075175285339e-05, 4.904859815724194e-05, 8.8933629740495235e-05, 3.782318890444003e-05, 3.1255676731234416e-05, 0.0001581302349222824, 0.00021147838560864329, 0.00016259757103398442, 5.0702063163043931e-05, 0.00010457599273649976, 0.00012991938274353743, 6.633355951635167e-05, 0.00019001387408934534, 9.565376240061596e-05, 0.00011700917093548924, 0.00011247783550061285, 9.9754804978147149e-05, 3.1533330911770463e-05, 6.7409164330456406e-05, 0.00013392815890256315, 0.00011097364040324464, 0.00011211973469471559, 0.00014082890993449837, 5.5775391956558451e-05, 0.00012457484262995422, 2.7195981601835229e-05, 4.5576529373647645e-05, 0.00013799942098557949, 9.3411559646483511e-05, 0.00010702453437261283, 9.4150644144974649e-05, 9.2990645498503e-05, 0.00010474934970261529, 7.9735757026355714e-05, 8.7581225670874119e-05, 3.4431323001626879e-05, 0.0001856693415902555, 9.5901188615243882e-05, 2.6510168027016334e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,97,70,52,-34,106,-63,60,-88,-79,48,51,-42,-72,-90,101,78,50,79,66,-74,-82,50,-32,-41,-63,-65,-67,61,-62,-114,-14,41,69,65,-65,53,-50,-23,50,-75,56,61,-95,10,76,-33, 82,-96,127,86,-77,-68,-57,-83,97,-102,-62,74,79,-106,-97,91,-38,95,82,127,84,-115,53,72,-51,-77,-68,-81,55,78,-29,-127,-84,78,82,84,-82,82,-83,-17,76,-96,81,91,-74,-127,94,-102, 34,-45,70,38,18,-41,-48,-38,43,-31,6,34,28,-78,-54,-1,-54,37,35,70,34,-54,32,25,-28,-46,-43,-24,30,30,88,-90,-84,44,36,34,-29,39,-37,-10,40,-40,34,43,-6,-9,37,-72, 
  /* [0][1][][] */ 93,-113,-41,92,54,-81,127,-88,87,-113,-72,83,83,-110,-14,-127,127,108,75,-38,84,108,-127,73,73,-75,-93,-99,-127,86,-69,-10,-88,71,106,96,-85,79,-81,89,85,-100,88,91,-89,106,94,-91, 127,-127,-65,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-23,96,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,52,127,-28,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-78,-33,66,36,-63,-49,-63,56,-42,-61,57,48,-53,-17,10,-63,50,58,-30,58,65,51,63,66,-65,-61,-45,35,54,127,14,-63,69,49,49,-49,60,-59,57,60,-58,54,63,-63,-67,58,-56, 
  /* [0][2][][] */ 46,-51,-46,50,26,-52,64,-42,41,-73,-5,40,56,-73,82,-79,72,51,34,-30,26,-9,-76,30,-23,-44,-49,-49,-75,31,-42,88,-73,37,48,41,-26,37,-42,-87,48,-49,40,45,-23,15,40,-74, 73,-74,-48,81,-57,-63,-72,-68,51,-77,-67,61,74,-48,127,32,-47,60,60,-43,55,-17,42,66,-47,-66,-78,-62,31,61,-24,116,-54,64,57,57,-49,62,-66,-106,68,-66,60,62,-86,48,63,-53, 41,-39,-26,46,28,-20,-17,-34,15,-26,-52,28,32,4,69,24,-36,23,29,-32,29,1,40,41,-23,-29,-48,-25,33,33,60,65,1,34,15,21,-22,30,-29,-55,28,-31,25,29,-64,8,31,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034982699435204268, 0.0013927329564467072, 0.0075782216154038906, 0.0018084071343764663, 0.0051648570224642754, 0.0029904171824455261, 0.0075078443624079227, 0.006048442330211401, 0.003071225481107831, 0.0016021681949496269, 0.0020845653489232063, 0.0037796793039888144, 0.0016074854647740722, 0.001328366226516664, 0.0067205349914729595, 0.0089878309518098831, 0.0069103967398405075, 0.0021548375952988863, 0.00444447947666049, 0.0055215735919773579, 0.00281917629763484, 0.0080755893141031265, 0.0040652849711477757, 0.0049728895537555218, 0.0047803078778088093, 0.0042395791970193386, 0.0013401665491983294, 0.0028648893348872662, 0.0056919469498097897, 0.0047163795679807663, 0.0047650886699557304, 0.0059852288104593754, 0.0023704541381448507, 0.005294430535286665, 0.0011558291735127568, 0.001937002525664866, 0.0058649755083024502, 0.0039699911139905453, 0.0045485426671802998, 0.0040014022961258888, 0.0039521022699773312, 0.0044518471695482731, 0.0033887694589793682, 0.0037222020328044891, 0.0014633311657235026, 0.007890947163105011, 0.004075800534337759, 0.0011266821529716253, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 497, 776, 1943, 482, 8942, 13391, 1885, 15, -675, -490, 996, 793, 3179, 1033, 21538, 2273, 1847, -1177, -334, 3250, -1555, 10238, 10371, 9671, 5339, 277, 4530, 3905, 7361, -468, 8758, 5889, 530, -74, 4743, 3639, -1574, 218, -511, 4497, 935, -507, -839, 76, 967, 3258, 659, 994, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00042615964775905013, 0.00091855681966990232, 0.0002815774641931057, 0.00031393035897053778, 0.00024537774152122438, 0.00030049006454646587, 0.00058863026788458228, 0.00023673148825764656, 0.00045124581083655357, 0.00086005608318373561, 0.0010219693649560213, 0.00034395940019749105, 0.00040070136310532689, 0.00073637452442198992, 0.00016621188842691481, 0.00054650759557262063, 0.00027551522362045944, 0.00035168926115147769, 0.00021488212223630399, 0.00027739291545003653, 0.000368338922271505, 0.00024856289383023977, 0.00035798706812784076, 0.00016075372695922852, 0.00029573254869319499, 0.00030763962422497571, 0.0015330938622355461, 0.00048798578791320324, 0.00023593701189383864, 0.00045508713810704648, 0.00029892032034695148, 0.00020691059762611985, 0.00072488636942580342, 0.0002672066621016711, 0.00078293157275766134, 0.00049774872604757547, 0.00086995313176885247, 0.0003114975115749985, 0.00028382462915033102, 0.00040497328154742718, 0.00017317986930720508, 0.00025006814394146204, 0.00034167399280704558, 0.00026494715712033212, 0.0020204412285238504, 0.00043136987369507551, 0.00035142293199896812, 0.0011644173646345735, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-5,-1,79,-37,47,22,-27, 
  /* [1][0][][] */ 26,71,48,12,9,-39,99,127, 
  /* [2][0][][] */ -46,6,-1,-10,-127,-20,16,1, 
  /* [3][0][][] */ 92,0,-12,-113,-127,14,38,-22, 
  /* [4][0][][] */ -127,39,-21,-13,71,-18,54,28, 
  /* [5][0][][] */ -100,-24,22,-8,-127,8,8,79, 
  /* [6][0][][] */ -13,-127,19,-17,5,-3,-3,34, 
  /* [7][0][][] */ -73,0,9,107,127,-38,-35,6, 
  /* [8][0][][] */ 73,10,4,-127,-5,-25,-39,-29, 
  /* [9][0][][] */ -5,-127,-8,-3,-1,81,-48,86, 
  /* [10][0][][] */ -98,-1,1,23,-127,66,69,-12, 
  /* [11][0][][] */ 121,16,47,20,-64,-50,-30,-127, 
  /* [12][0][][] */ -1,16,39,-8,8,-80,127,59, 
  /* [13][0][][] */ 63,-25,1,-10,127,119,127,-35, 
  /* [14][0][][] */ 127,49,-6,24,-101,-11,-36,-25, 
  /* [15][0][][] */ -16,-127,15,-11,2,2,6,35, 
  /* [16][0][][] */ -45,-14,4,1,-127,-1,13,6, 
  /* [17][0][][] */ -32,102,-122,-1,13,-127,108,-94, 
  /* [18][0][][] */ 127,-29,-44,15,-57,28,9,101, 
  /* [19][0][][] */ 127,-48,-31,-10,52,-5,37,16, 
  /* [20][0][][] */ 127,17,-15,118,1,43,-4,-64, 
  /* [21][0][][] */ 2,44,-60,4,-17,102,-127,-92, 
  /* [22][0][][] */ -127,17,24,-11,-35,7,-53,-24, 
  /* [23][0][][] */ -41,-60,1,21,-127,64,81,-16, 
  /* [24][0][][] */ 127,2,-6,-2,-86,-17,9,12, 
  /* [25][0][][] */ 28,-17,-3,-25,127,53,51,-30, 
  /* [26][0][][] */ 13,-102,0,-37,2,-127,83,-52, 
  /* [27][0][][] */ -18,-127,27,-15,-1,-60,34,-6, 
  /* [28][0][][] */ -87,48,-25,-4,-19,-35,127,94, 
  /* [29][0][][] */ -17,49,12,5,2,42,-109,-127, 
  /* [30][0][][] */ 127,-32,-11,12,-74,6,-45,-26, 
  /* [31][0][][] */ -18,-49,69,-15,20,-107,127,92, 
  /* [32][0][][] */ -80,26,7,10,-127,-110,-93,58, 
  /* [33][0][][] */ -25,16,3,26,-127,-63,-44,24, 
  /* [34][0][][] */ 5,-127,49,-12,1,97,-82,60, 
  /* [35][0][][] */ -21,-52,-127,-8,-4,-70,46,-53, 
  /* [36][0][][] */ 5,127,56,9,-7,9,-17,-36, 
  /* [37][0][][] */ -127,37,37,-15,59,-37,-2,-108, 
  /* [38][0][][] */ -127,-13,-54,-15,45,22,39,112, 
  /* [39][0][][] */ -6,-21,54,-9,17,-81,127,86, 
  /* [40][0][][] */ -33,-11,-7,-35,-127,107,126,-26, 
  /* [41][0][][] */ -127,44,14,-78,-82,-85,-94,51, 
  /* [42][0][][] */ -44,-127,-108,-6,-10,61,-119,-86, 
  /* [43][0][][] */ -74,11,-12,-127,99,58,62,-1, 
  /* [44][0][][] */ 127,-6,26,-106,37,-26,-24,36, 
  /* [45][0][][] */ -18,-127,3,-16,-3,-72,80,6, 
  /* [46][0][][] */ 114,-2,-6,-21,127,-41,-27,8, 
  /* [47][0][][] */ 127,-7,-1,112,-6,28,10,-41, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00076151260873302817, 0.0016413863049820065, 0.00050315598491579294, 0.00056096800835803151, 0.00043847004417330027, 0.00053695129463449121, 0.0010518343187868595, 0.00042301989742554724, 0.00080633955076336861, 0.0015368502354249358, 0.0018261759541928768, 0.0006146274390630424, 0.00071602070238441229, 0.0013158413348719478, 0.00029700712184421718, 0.00097656459547579288, 0.00049232324818149209, 0.0006284400587901473, 0.00038397684693336487, 0.00049567857058718801, 0.00065819168230518699, 0.00044416164746508002, 0.00063969375332817435, 0.00028725381707772613, 0.00052845000755041838, 0.00054972694488242269, 0.0027395139914005995, 0.00087199086556211114, 0.00042160024167969823, 0.00081320368917658925, 0.00053414626745507121, 0.00036973238456994295, 0.0012953128898516297, 0.00047747656935825944, 0.0013990349834784865, 0.0008894364582374692, 0.0015545354690402746, 0.00055662071099504828, 0.0005071714986115694, 0.00072365428786724806, 0.00030945832259021699, 0.00044685139437206089, 0.00061054358957335353, 0.00047343902406282723, 0.0036103639286011457, 0.00077082286588847637, 0.0006279641529545188, 0.0020807189866900444, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -42878, 31636, -10852, -12574, 19110, 1961, 29160, 42729, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0004635484074242413, 0.00081870891153812408, 0.001575334114022553, 0.0016354850959032774, 0.0007039227057248354, 0.00068086362443864346, 0.00080898782471194863, 0.0011567113688215613, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -57,-13,-36,16,4,-24,5,2,-107,125,-40,112,127,8,80,-22,-7,-33,7,5,-4,-3,-18,-21,24,-100,10,71,-18,11,17,-33,-7,-73,111,19,-3,-12,-1,-21,111,-4,60,-21,-25,26,-18,-19, 
  /* [1][0][][] */ 6,30,127,1,-7,-29,3,-93,36,-10,21,-3,-19,10,-3,-124,9,-57,11,5,-21,36,22,-27,-15,-9,19,3,12,-5,14,-1,-9,8,16,10,-3,-36,72,-62,8,44,-6,24,-12,9,22,-2, 
  /* [2][0][][] */ 3,-53,16,-46,32,26,-8,-33,5,2,-4,15,-13,58,5,-5,-42,127,-24,-39,-18,22,-42,-9,124,4,1,-6,-31,-9,1,-45,-7,-15,-2,10,-16,-4,-16,4,14,-18,-23,-1,-1,26,-27,-43, 
  /* [3][0][][] */ 4,-92,-5,6,1,-4,-15,-3,-4,-14,18,22,13,-10,47,0,-12,-23,3,24,-8,20,-26,6,5,56,2,9,-6,5,127,-2,17,5,-1,-3,-18,-15,-4,15,-8,9,-12,26,-5,-2,2,34, 
  /* [4][0][][] */ -103,7,-2,-3,-4,-34,0,8,44,-34,20,-18,-33,-4,-15,-9,-2,3,2,27,5,-31,18,7,-13,53,7,111,0,4,-11,-30,2,-127,-34,6,1,-5,1,6,-57,-9,-13,17,-60,-2,3,5, 
  /* [5][0][][] */ -17,22,18,2,-48,11,-5,39,30,-8,10,-2,-4,-45,5,31,-2,-83,22,6,41,-39,3,41,8,5,-73,-38,-42,-30,16,1,-6,-63,0,-69,65,11,-30,15,20,-31,1,3,127,-16,-40,-3, 
  /* [6][0][][] */ -30,-22,-13,1,40,-25,2,-21,-17,-3,36,-10,-11,44,-2,-57,0,5,-5,-24,-36,44,-7,-83,6,-15,-59,-68,28,44,-15,3,8,-58,-19,68,-63,-47,6,-52,-12,7,18,42,127,-30,43,16, 
  /* [7][0][][] */ 13,31,-74,24,-26,11,4,56,-14,-1,60,-31,6,-33,-11,0,-20,-127,41,-38,52,35,16,-54,15,-18,22,3,-18,30,-15,0,6,32,-6,-24,-9,-55,-43,-61,-10,-28,36,57,-30,-21,-6,-5, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019700806587934494, 0.034795127809047699, 0.066951699554920197, 0.069508112967014313, 0.029916714876890182, 0.028936702758073807, 0.034381981939077377, 0.04916023463010788, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52548, -36, 8846, -444, 6290, -6335, 1202, 15788, 2094, 30895, -2371, 21662, -6321, -901, 27102, 618, 389, 15687, 36227, 11330, -64, -385, 279, 9753, -8293, 27804, 45398, 36159, 3240, 61, -1784, 1425, 817, 20147, -6866, 15116, -11197, 17482, -22128, 121084, 21225, 19370, 11933, -1774, 14603, 3280, 1118, -9, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031158735509961843, 0.00030275504104793072, 0.00017868023132905364, 0.00025695981457829475, 0.00015056735719554126, 9.6451571153011173e-05, 0.0010018204338848591, 0.00022452803386840969, 0.00010701640712795779, 0.00015682050434406847, 7.2527647716924548e-05, 0.00019828398944810033, 0.00024577701697126031, 0.00018986366922035813, 9.1907975729554892e-05, 0.002455602865666151, 0.00024312057939823717, 0.00025417760480195284, 6.4104213379323483e-05, 0.00016039746697060764, 0.00021265180839691311, 0.00015614822041243315, 0.00016883357602637261, 0.00020343974756542593, 0.00017306154768448323, 0.00013194351049605757, 0.00055590987903997302, 9.3770599050913006e-05, 0.00019875280850101262, 0.012340997345745564, 0.00010590649617370218, 0.00017404466052539647, 0.0011420490918681026, 0.00014335640298668295, 0.00019778510613832623, 0.0001653435465414077, 0.00036630828981287777, 0.0001409859542036429, 0.00026741539477370679, 2.1169600586290471e-05, 0.00015295136836357415, 5.6700246204854921e-05, 0.00013770496298093349, 0.00013648372259922326, 0.00016182252147700638, 9.9503929959610105e-05, 0.00025859547895379364, 0.00011605846520978957, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,21,109,4,82,-1,28,16,8,10,7,-9,-9,-44,8,-1,9,-23,-113,-7,-22,127,-10,-3,7,-5,8,-4,4,16,100,19,29,37,-28,2,35,-1,1,17,-68,-9,-9,17,3,-7,-10, 127,10,15,-127,28,88,11,10,124,127,6,43,-51,-24,7,8,127,-56,-59,-56,-101,25,-109,15,17,71,-31,-83,24,21,10,-125,5,-61,127,10,-39,-46,-6,116,-79,-98,-30,2,-34,-8,-127,23, -32,-3,8,15,-1,66,4,17,28,9,-14,31,-15,-3,16,3,-102,29,-4,78,-32,-11,-18,-6,-4,-59,-3,29,-16,5,5,-22,7,-24,16,-19,0,48,40,-13,50,37,-16,12,-43,4,-2,-7, 
  /* [0][1][][] */ 126,7,1,-98,13,-26,35,-17,9,9,-12,54,-7,-1,18,-33,0,-50,-60,-85,10,-73,-124,-18,5,99,-15,-127,-8,32,12,-109,16,-54,-3,127,-3,59,-40,40,-63,-127,39,-89,-44,-13,-13,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,36,-127,-82,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,93,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-121,102,107, 54,6,49,-13,5,-60,44,18,-23,15,-106,-8,-1,-40,127,4,63,-66,-72,86,13,-45,11,-33,1,6,-38,67,20,40,2,2,32,-45,9,67,-5,65,67,-10,-82,7,-85,-32,26,-16,-10,5, 
  /* [0][2][][] */ -53,-7,26,-17,7,36,-37,22,7,-23,12,33,6,-6,-38,18,5,22,-14,106,6,-32,-16,-12,-3,22,0,50,-9,3,46,-32,-19,-44,-32,-40,-1,31,9,-22,9,-3,42,-37,-36,18,-11,17, 68,126,75,21,16,-20,124,35,18,-3,44,27,-5,0,-91,24,-58,-56,-37,123,-37,49,12,20,32,-64,-40,29,77,1,127,21,84,-27,7,-36,-25,-17,-12,119,-27,-12,-40,45,21,-32,7,-127, -42,-4,7,-3,5,-5,-61,7,-18,-10,-41,-40,19,-9,-9,11,33,24,-9,-127,24,-10,5,-9,-7,10,-10,-55,-15,8,6,8,-21,87,-36,-23,-5,37,24,-61,4,8,-38,7,-42,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01324246171861887, 0.012867089360952377, 0.0075939097441732883, 0.010920791886746883, 0.0063991122879087925, 0.0040991916321218014, 0.042577367275953293, 0.0095424409955739975, 0.0045481971465051174, 0.0066648712381720543, 0.0030824248678982258, 0.0084270695224404335, 0.010445523075759411, 0.008069206029176712, 0.0039060888811945915, 0.10436312109231949, 0.010332624427974224, 0.010802548378705978, 0.0027244291268289089, 0.0068168924190104008, 0.0090377014130353928, 0.006636299192905426, 0.0071754269301891327, 0.0086461892351508141, 0.0073551158420741558, 0.0056075993925333023, 0.023626169189810753, 0.0039852503687143326, 0.008446994237601757, 0.52449238300323486, 0.0045010261237621307, 0.00739689776673913, 0.048537086695432663, 0.0060926470905542374, 0.0084058670327067375, 0.0070271003060042858, 0.015568101778626442, 0.0059919026680290699, 0.011365153826773167, 0.00089970801491290331, 0.0065004331991076469, 0.0024097603745758533, 0.0058524608612060547, 0.0058005577884614468, 0.0068774567916989326, 0.0042289169505238533, 0.010990307666361332, 0.0049324845895171165, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 55724, 7921, 7300, 9281, 1726, 11031, -2093, -291, 886, 2533, 3586, 304, 1693, -793, 757, -2244, 5828, 11955, -249, 28256, 4052, 2864, 8163, -595, 3676, 6284, 25300, 9969, -59, -2940, 158, 2328, -2320, 9123, 3628, 8959, 8907, 5101, 23238, 1850, -941, 3102, 1161, 4441, 4668, 2295, -1500, 2841, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.7336575486697257e-05, 0.00028568570269271731, 0.00020698814478237182, 0.00034603133099153638, 0.0013077494222670794, 0.00045699486508965492, 0.00091986643383279443, 0.0010241533163934946, 0.00066553946817293763, 0.00053647253662347794, 0.00063125323504209518, 0.00041607356979511678, 0.0005665638018399477, 0.00060712086269631982, 0.00055715226335451007, 0.0016173649346455932, 0.00027909476193599403, 0.00035242288140580058, 0.0020335984881967306, 9.5539515314158052e-05, 0.00029505998827517033, 0.00034523793146945536, 0.00048510354827158153, 0.00086528004612773657, 0.00033293743035756052, 0.00018891453510150313, 0.00015943055041134357, 0.00036782003007829189, 0.00099816673900932074, 0.00089303532149642706, 0.00050042511429637671, 0.00036636812728829682, 0.00084486854029819369, 0.00023948212037794292, 0.00028825458139181137, 0.00020777748432010412, 0.00041277290438301861, 0.0002657868608366698, 9.9804477940779179e-05, 0.0024572482798248529, 0.00064560986356809735, 0.00089519791072234511, 0.00041287703788839281, 0.00034149183193221688, 0.00025673207710497081, 0.00048520963173359632, 0.00075885659316554666, 0.00093935406766831875, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 68,32,1,-12,127,21,-45,-25, 
  /* [1][0][][] */ 1,-4,3,127,7,-8,9,19, 
  /* [2][0][][] */ 26,-127,-21,44,-7,-80,92,7, 
  /* [3][0][][] */ 127,-35,-7,19,-5,-36,33,5, 
  /* [4][0][][] */ 14,-60,127,-6,-10,-41,5,-107, 
  /* [5][0][][] */ 65,0,7,3,127,25,-23,-10, 
  /* [6][0][][] */ -18,92,-15,127,25,48,-74,-53, 
  /* [7][0][][] */ -6,127,-2,-1,2,-11,12,-6, 
  /* [8][0][][] */ 127,55,-4,0,-56,-25,2,-41, 
  /* [9][0][][] */ -127,13,5,29,58,7,-3,7, 
  /* [10][0][][] */ -77,-1,7,127,44,33,-18,-11, 
  /* [11][0][][] */ -127,-1,14,-68,38,3,-17,-39, 
  /* [12][0][][] */ 127,19,7,25,-45,-12,-3,-38, 
  /* [13][0][][] */ -10,89,-127,-13,-3,93,-71,79, 
  /* [14][0][][] */ -42,-31,-14,127,17,17,-12,-20, 
  /* [15][0][][] */ -2,127,1,-2,0,-16,10,-49, 
  /* [16][0][][] */ -13,-127,-18,9,2,-122,114,-25, 
  /* [17][0][][] */ 23,127,1,-13,0,76,-91,-15, 
  /* [18][0][][] */ -11,48,-127,1,13,57,-35,70, 
  /* [19][0][][] */ -94,27,9,-1,-127,3,19,18, 
  /* [20][0][][] */ -127,-19,-2,7,58,-32,41,-4, 
  /* [21][0][][] */ -66,1,-2,4,-127,-8,16,5, 
  /* [22][0][][] */ -127,-19,2,-2,88,-12,33,48, 
  /* [23][0][][] */ -22,-23,-6,-12,-1,81,-127,-92, 
  /* [24][0][][] */ -10,44,-127,3,10,49,-22,76, 
  /* [25][0][][] */ 112,-38,-5,127,-91,-17,14,-46, 
  /* [26][0][][] */ 9,-21,-5,3,-11,123,127,-30, 
  /* [27][0][][] */ 61,-10,-6,6,127,29,39,-22, 
  /* [28][0][][] */ -4,127,-61,8,3,81,-33,114, 
  /* [29][0][][] */ -9,14,-6,-9,-3,84,-127,-84, 
  /* [30][0][][] */ 5,-7,1,-127,-7,3,-5,-15, 
  /* [31][0][][] */ -65,7,6,7,-127,9,18,1, 
  /* [32][0][][] */ -11,29,17,-127,-3,26,-91,-92, 
  /* [33][0][][] */ -57,-6,-2,-3,-127,40,45,4, 
  /* [34][0][][] */ -127,78,14,40,40,-27,17,17, 
  /* [35][0][][] */ -31,127,-8,3,6,-114,95,-23, 
  /* [36][0][][] */ -6,56,9,-29,-2,104,-127,-36, 
  /* [37][0][][] */ 25,-62,-7,25,29,-127,121,-15, 
  /* [38][0][][] */ 14,-127,11,23,2,63,-53,66, 
  /* [39][0][][] */ 4,-127,-12,-9,-3,-11,-50,-94, 
  /* [40][0][][] */ 127,52,-8,-13,-65,72,-112,-98, 
  /* [41][0][][] */ 16,-122,21,-2,-12,84,-61,127, 
  /* [42][0][][] */ 50,-1,-6,-127,-55,-6,4,-40, 
  /* [43][0][][] */ -98,-17,19,-127,64,15,-23,-14, 
  /* [44][0][][] */ -2,-25,-5,20,-26,95,127,-16, 
  /* [45][0][][] */ -127,-62,-3,4,-4,5,19,-7, 
  /* [46][0][][] */ 15,78,127,0,-3,17,11,22, 
  /* [47][0][][] */ 2,0,4,127,3,7,4,-4, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00020264406339265406, 0.00074857863364741206, 0.00054236844880506396, 0.00090670154895633459, 0.0034266794100403786, 0.0011974578956142068, 0.0024103145115077496, 0.00268357596360147, 0.0017439047805964947, 0.0014057123335078359, 0.0016540649812668562, 0.0010902323992922902, 0.0014845600817352533, 0.0015908312052488327, 0.0014598991256207228, 0.0042379610240459442, 0.0007313084788620472, 0.00092344928998500109, 0.0053286124020814896, 0.00025034099235199392, 0.00077314197551459074, 0.0009046226623468101, 0.0012711107265204191, 0.0022672824561595917, 0.0008723917999304831, 0.00049501040484756231, 0.0004177538794465363, 0.00096379418391734362, 0.0026154837105423212, 0.0023400092031806707, 0.0013112577144056559, 0.00095998984761536121, 0.002213798463344574, 0.00062751199584454298, 0.00075530988397076726, 0.0005444367416203022, 0.0010815836722031236, 0.00069643801543861628, 0.00026151642668992281, 0.0064386967569589615, 0.0016916834283620119, 0.0023456758353859186, 0.0010818565497174859, 0.00089480675524100661, 0.000672711874358356, 0.0012713887263089418, 0.0019884223584085703, 0.002461377764120698, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -3899, -26168, 22799, 22150, 848, 313, 38783, 9093, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014510430628433824, 0.00063205329934135079, 0.0015956130810081959, 0.0013195348437875509, 0.0011078037787228823, 0.0011234250850975513, 0.0007152833859436214, 0.0007140343077480793, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,-1,7,-93,9,28,8,6,4,9,-1,-6,97,0,0,6,0,-6,-5,1,75,-2,-2,5,32,34,12,11,5,6,1,-127,9,11,-3,2,-26,4,-15,32,8,-25,-6,8,1,-2,5,4, 
  /* [1][0][][] */ -35,-8,-3,-6,42,27,-29,77,21,8,-29,-21,12,0,19,35,0,45,16,-48,0,19,127,19,-25,-5,57,4,19,-5,16,-11,13,-6,-10,-19,5,-52,6,4,-9,-7,-76,-7,-31,9,-48,-93, 
  /* [2][0][][] */ -56,18,-1,12,42,-9,27,26,-11,56,9,-4,4,0,7,49,0,14,-127,22,1,15,7,-14,-29,0,39,5,7,27,22,4,7,-5,-12,-12,8,5,3,1,36,-4,-27,1,24,-55,22,18, 
  /* [3][0][][] */ 1,0,-3,5,-6,31,-2,-5,64,15,-2,0,28,0,-32,-6,0,-2,-8,4,-1,3,4,-19,-11,-5,-11,-4,-8,-2,-1,-7,-46,42,-53,-2,4,0,4,-127,2,5,-1,-52,-2,-1,1,5, 
  /* [4][0][][] */ 4,0,79,36,4,-25,-2,-3,-1,-1,1,-11,-79,0,-12,6,0,10,3,0,68,4,3,-2,-19,35,-3,48,-5,-2,1,102,2,6,0,-2,15,-14,-9,-20,-3,-127,4,3,0,1,0,1, 
  /* [5][0][][] */ -6,45,3,-9,2,49,26,14,-21,30,5,54,26,0,-127,-3,0,15,-39,21,-10,12,-13,42,-18,-3,29,-1,-13,22,22,-18,49,29,-40,-5,5,19,-47,18,24,-11,-10,29,21,61,21,23, 
  /* [6][0][][] */ -21,-55,2,4,40,-44,-20,7,25,-26,-13,88,-3,0,-127,41,0,-12,51,-20,-4,-2,25,-35,32,2,-5,-13,45,-12,-11,-3,93,-32,25,-1,-3,-10,-71,-24,-12,-15,-4,-28,-22,-86,-19,-28, 
  /* [7][0][][] */ -111,-22,-17,7,127,19,63,27,12,5,26,-35,-26,0,87,103,0,10,-1,61,-11,0,-27,45,19,9,45,2,49,62,58,-6,-13,-16,-22,-24,3,19,27,34,76,5,-28,-11,61,6,64,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.061669327318668365, 0.026862265542149544, 0.067813552916049957, 0.056080229580402374, 0.047081660479307175, 0.047745566815137863, 0.030399542301893234, 0.030346456915140152, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 69602, 59892, 61649, 43089, -19, 13860, 3040, 27369, 29384, 25944, 29499, 6969, -46714, -127, 46713, 754, -204, 26535, 2026, 1878, -15887, -2690, 46320, 31944, -21538, 30360, 36613, 22607, -2648, 15314, -7488, -50132, 13248, 103251, 29007, 1294, 53794, -30, 146380, -27070, 14043, -27236, 3531, 89393, -1397, 76798, 1728, -22932, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.6627384007442743e-05, 6.5670421463437378e-05, 0.00015484628966078162, 0.00011845288099721074, 0.00012468850763980299, 0.00016238955140579492, 0.00012334639905020595, 5.9369092923589051e-05, 7.8568089520558715e-05, 3.0919440177967772e-05, 8.8008600869216025e-05, 2.5743142032297328e-05, 0.00017368690168950707, 0.005541567225009203, 5.5067372159101069e-05, 0.00019305736350361258, 0.0027484172023832798, 2.0828061678912491e-05, 9.3143709818832576e-05, 0.00016926045645959675, 0.00011651030945358798, 0.00014507987361866981, 0.0001256989489775151, 3.7315938243409619e-05, 8.9892135292757303e-05, 9.0637731773313135e-05, 3.5531993489712477e-05, 4.4837739551439881e-05, 0.00023308017989620566, 5.4893265769351274e-05, 4.4115091441199183e-05, 0.0001811781112337485, 0.00018442499276716262, 1.0238775757898111e-05, 8.4735002019442618e-05, 0.00021808655583299696, 1.7373371520079672e-05, 0.00045011405018158257, 3.1795319955563173e-05, 9.4302617071662098e-05, 6.6884946136269718e-05, 0.00020332884741947055, 9.1438931121956557e-05, 9.8052105386159383e-06, 0.00014062218542676419, 7.6148899097461253e-05, 0.00019515860185492784, 0.00013023463543504477, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-22,-6,-17,7,-39,-79,-69,-26,-50,9,67,34,-71,115,-43,-113,-85,37,-6,-1,-72,-111,-79,-34,-123,-64,-21,71,15,96,26,-127,-90,-7,54,18,48,-127,79,-77,-14,105,-110,-3,-35,-87,107, 76,12,-28,-29,57,-127,-127,-81,60,-75,-116,110,37,-82,-1,62,-52,-113,59,7,11,-112,-127,-69,-4,-127,-120,-41,-55,21,-56,54,29,-127,64,84,13,72,-92,127,-127,7,125,-127,2,-23,-127,94, -31,43,6,-5,-64,-108,-59,-18,87,-8,-127,38,8,-71,-101,-11,-127,-26,27,12,-16,-77,-36,-24,-11,-29,-59,-12,-10,17,-24,9,108,-87,70,31,14,35,-4,16,-79,3,7,-80,-17,5,-56,14, 
  /* [0][1][][] */ -85,-127,-43,-43,-10,54,98,-105,-26,-108,-21,113,90,-64,27,-97,-121,-95,89,-76,41,-88,-103,-127,42,-117,-79,-37,127,-60,127,84,-43,-85,-14,84,-36,-77,-108,91,42,59,104,-110,-91,-118,82,120, 127,-84,-127,-127,127,40,93,-127,100,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-120,-119,127,-98,-127,-127,-121,-127,-71,127,29,-112,127,127,-69,-127,-97,90,61,127,127,-117,-112,-127,124,127, -52,31,-61,-85,-119,-23,31,-38,127,-20,-76,34,56,-70,-25,-44,-37,-30,55,-72,56,-81,-39,-24,48,-5,-46,-59,16,-89,-35,20,30,-99,118,23,-37,-62,1,-15,37,53,10,-76,-58,-37,64,36, 
  /* [0][2][][] */ -61,-107,-33,-34,0,34,-5,-35,-37,-60,-15,60,77,-127,-127,-63,-43,-20,63,75,52,-34,-13,-60,33,-54,-11,-58,76,29,77,62,108,-27,-38,-9,-94,35,-18,31,9,37,14,-57,96,-78,4,31, 87,-75,-88,-85,81,18,7,-47,48,-71,-33,56,83,-26,16,93,-24,-33,77,117,82,-54,-18,-58,94,-67,-19,-100,-51,40,-45,111,-18,-48,67,6,-127,50,-15,-1,11,32,15,-68,127,-100,-12,40, -28,29,-42,-37,-79,-18,22,-12,59,-5,-13,32,31,-43,112,-29,-93,-5,30,59,74,-29,-1,-3,44,2,-5,-63,-12,28,-20,39,-90,-43,65,3,-21,21,27,-39,7,35,-6,-16,63,-34,-5,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036816636566072702, 0.0027909928467124701, 0.0065809674561023712, 0.005034247413277626, 0.0052992617711424828, 0.0069015556946396828, 0.0052422219887375832, 0.0025231863837689161, 0.0033391437027603388, 0.0013140762457624078, 0.0037403656169772148, 0.001094083534553647, 0.007381693460047245, 0.23551659286022186, 0.0023403633385896683, 0.0082049379125237465, 0.1168077290058136, 0.0008851925958879292, 0.0039586075581610203, 0.0071935695596039295, 0.0049516879953444004, 0.0061658946797251701, 0.0053422050550580025, 0.0015859273262321949, 0.0038204158190637827, 0.003852103604003787, 0.0015101097524166107, 0.0019056039163842797, 0.0099059073254466057, 0.0023329637479037046, 0.0018748913425952196, 0.0077000698074698448, 0.007838062010705471, 0.00043514795834198594, 0.0036012374330312014, 0.0092686787247657776, 0.00073836831143125892, 0.01912984624505043, 0.0013513010926544666, 0.0040078610181808472, 0.0028426102362573147, 0.0086414758116006851, 0.0038861543871462345, 0.00041672145016491413, 0.005976442713290453, 0.0032363280188292265, 0.0082942405715584755, 0.0055349715985357761, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4853, 111, 9711, 6721, 8289, 6533, 12825, -36, 26, -355, 2214, 469, 13561, -89283344, 2917, 23374, -72074144, -123, -524, 13076, 4318, -17, 50, 455, 3907, -1018, 61, 714, 4289, 1666, 2737, 15707, 4215, 380, 297, -1956, 368, 4054, -153, 15296, 2095, 13318, -343, -105, 16028, 171, 9563, 4123, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043636566260829568, 0.00039227216620929539, 0.00032670932705514133, 0.0002795359177980572, 0.0002406256680842489, 0.00031390198273584247, 0.00029871423612348735, 0.0014718685997650027, 0.00034424508339725435, 0.0021254306193441153, 0.00066737085580825806, 0.0017760824412107468, 0.00016366761701647192, 1.8165051685059552e-09, 0.00090003985678777099, 0.00014165000175125897, 1.8165051685059552e-09, 0.0059614647179841995, 0.00036564969923347235, 0.00029676838312298059, 0.00025286516756750643, 0.0046557141467928886, 0.00033836066722869873, 0.0013709228951483965, 0.0009740664972923696, 0.00056353450054302812, 0.0023517475929111242, 0.0017178549896925688, 0.00025907659437507391, 0.0017564260633662343, 0.001083416398614645, 0.00014871035818941891, 0.0001802249753382057, 0.0084781162440776825, 0.00041778344893828034, 0.00061365577857941389, 0.004108634777367115, 0.0003180077183060348, 0.0024296359624713659, 0.00022614987392444164, 0.0013451641425490379, 0.00016569237050134689, 0.00041752707329578698, 0.0078259930014610291, 0.00031412907992489636, 0.00046405670582316816, 0.00029221517615951598, 0.00021811337501276284, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,51,-43,28,-17,-47,23, 
  /* [1][0][][] */ 68,64,-24,-96,10,-13,-77,127, 
  /* [2][0][][] */ 24,11,-44,118,47,127,50,87, 
  /* [3][0][][] */ 79,73,-84,127,-94,-5,-8,16, 
  /* [4][0][][] */ -33,-108,83,5,6,33,-52,-127, 
  /* [5][0][][] */ 22,8,-29,36,2,-26,33,127, 
  /* [6][0][][] */ 53,-17,-127,-98,107,20,50,-38, 
  /* [7][0][][] */ 127,19,21,-23,31,-8,85,-63, 
  /* [8][0][][] */ 22,-101,9,109,-1,27,-9,-127, 
  /* [9][0][][] */ 101,-127,15,0,-11,14,-119,83, 
  /* [10][0][][] */ -127,-35,-121,20,-15,8,-101,56, 
  /* [11][0][][] */ -22,-41,-11,-102,-127,-34,50,-16, 
  /* [12][0][][] */ 13,12,-43,69,-77,-26,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-33,-6,11,45,127,46,41, 
  /* [15][0][][] */ 44,0,14,-127,70,38,-53,78, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 16,24,127,25,-30,-7,31,28, 
  /* [18][0][][] */ 85,-127,24,33,-2,20,-116,0, 
  /* [19][0][][] */ -127,-7,42,86,-62,-60,-98,77, 
  /* [20][0][][] */ 37,27,-44,110,-27,-127,-7,65, 
  /* [21][0][][] */ 54,24,127,10,-12,-9,64,9, 
  /* [22][0][][] */ -77,-17,-127,2,8,8,-103,4, 
  /* [23][0][][] */ -96,117,-22,-20,5,-13,127,-74, 
  /* [24][0][][] */ 5,-57,-56,86,-6,-63,100,127, 
  /* [25][0][][] */ 15,55,42,36,127,126,-85,-52, 
  /* [26][0][][] */ -81,-33,-127,1,7,14,-95,-2, 
  /* [27][0][][] */ 2,-26,-31,11,-49,127,69,47, 
  /* [28][0][][] */ -1,-21,-24,41,25,127,56,64, 
  /* [29][0][][] */ 85,30,127,2,-18,-9,82,-8, 
  /* [30][0][][] */ -79,127,-25,-29,8,-8,102,-46, 
  /* [31][0][][] */ -41,-101,-24,4,37,-79,127,112, 
  /* [32][0][][] */ 8,7,-49,126,-1,92,95,127, 
  /* [33][0][][] */ 1,64,-9,-105,13,-11,-8,127, 
  /* [34][0][][] */ -20,83,-1,-101,34,-12,12,127, 
  /* [35][0][][] */ 127,14,-15,-46,28,36,99,-48, 
  /* [36][0][][] */ -127,3,26,59,-29,21,-113,81, 
  /* [37][0][][] */ -1,-20,-5,27,27,127,49,61, 
  /* [38][0][][] */ 10,20,4,84,127,-9,-22,32, 
  /* [39][0][][] */ 9,31,41,-122,33,1,-46,127, 
  /* [40][0][][] */ 93,28,127,2,-8,-4,85,-7, 
  /* [41][0][][] */ -5,-28,-38,91,60,127,84,105, 
  /* [42][0][][] */ -78,-7,127,22,-34,10,-29,57, 
  /* [43][0][][] */ -13,-56,6,102,-18,2,17,-127, 
  /* [44][0][][] */ 39,-2,-71,-127,71,-17,-2,-119, 
  /* [45][0][][] */ -91,127,-3,-53,11,-1,78,-57, 
  /* [46][0][][] */ -127,-18,42,21,-30,27,-78,32, 
  /* [47][0][][] */ 102,17,114,-2,33,-27,127,-17, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00094575848197564483, 0.00085019232938066125, 0.00070809450699016452, 0.00060585304163396358, 0.00052152079297229648, 0.00068033643765375018, 0.00064741924870759249, 0.0031900589819997549, 0.00074610067531466484, 0.0046065584756433964, 0.0014464283594861627, 0.0038493978790938854, 0.00035472551826387644, 3.937008052901092e-09, 0.0019507041433826089, 0.0003070055681746453, 3.937008052901092e-09, 0.012920599430799484, 0.00079249200643971562, 0.00064320187084376812, 0.00054804811952635646, 0.010090576484799385, 0.00073334702756255865, 0.0029712740797549486, 0.002111145993694663, 0.0012213782174512744, 0.0050970674492418766, 0.003723198315128684, 0.00056151044555008411, 0.003806795459240675, 0.0023481459356844425, 0.00032230786746367812, 0.00039061115239746869, 0.01837507076561451, 0.00090548425214365125, 0.0013300087302923203, 0.008904862217605114, 0.00068923499202355742, 0.0052658789791166782, 0.00049014663090929389, 0.0029154457151889801, 0.00035911388113163412, 0.00090492860181257129, 0.016961690038442612, 0.00068082864163443446, 0.0010057747131213546, 0.00063333346042782068, 0.00047272868687286973, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -553, -43153, -8673, -10752, -32786, -2338, -25445, -26742, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.002109460299834609, 0.0023648382630199194, 0.0026546185836195946, 0.0011600462021306157, 0.0010873128194361925, 0.0021549188531935215, 0.001431888435035944, 0.001015257672406733, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,1,0,125,0,-1,-1,-1,-127,-95,-7,0,121,-2,0, 
  /* [1][0][][] */ 0,-28,-5,88,75,12,22,7,-1,-3,127,-42,0,31,-12,0, 
  /* [2][0][][] */ 0,1,2,-12,-58,4,11,1,0,4,-17,3,0,127,-7,0, 
  /* [3][0][][] */ 0,-9,-25,-127,81,23,66,15,-1,59,1,41,0,-3,18,0, 
  /* [4][0][][] */ 0,46,-21,35,-55,32,127,11,1,-60,17,-8,0,-5,14,0, 
  /* [5][0][][] */ 0,-16,-13,0,-22,-24,-12,16,0,11,-3,-43,0,-3,127,0, 
  /* [6][0][][] */ 0,16,-2,3,50,-23,-24,-7,-1,-116,120,65,0,127,61,0, 
  /* [7][0][][] */ 0,15,-18,127,8,-4,20,7,1,67,-53,72,0,-7,47,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.089652061462402344, 0.10050562769174576, 0.11282128840684891, 0.049301963299512863, 0.046210795640945435, 0.091584049165248871, 0.060855258256196976, 0.043148450553417206, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 6637, 129225, 11864, 11276, 1144, 14587, 551, -18913, 6770, 29825, 14258, -445, 26878, 13966, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00039574183756485581, 3.1074483558768407e-05, 0.00029718445148319006, 0.00015834684018045664, 0.0028951757121831179, 0.00035689433570951223, 0.0070621687918901443, 1.6758122001192532e-05, 0.00027085928013548255, 0.0001982801768463105, 0.00075375026790425181, 0.00072724185883998871, 0.00023899685766082257, 0.00015278661157935858, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,92,-2,-72,67,-95,77,-95,-28,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,16,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,-1,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.016819028183817863, 0.0013206654693931341, 0.012630338780581951, 0.0067297406494617462, 0.12304496765136719, 0.015168009325861931, 0.30014216899871826, 0.00071222020778805017, 0.011511519551277161, 0.0084269074723124504, 0.032034385949373245, 0.030907778069376945, 0.010157366283237934, 0.0064934310503304005, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 3720, -78995, 54622, 380224, -6498, 36972, -14693, -99599, 46651, 34513, 955743, -1073741824, 56808, 62656, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00016022390627767891, 0.00016752793453633785, 3.4192016755696386e-05, 9.7361507869209163e-06, 0.00016182700346689671, 9.7857933724299073e-05, 0.00025155043113045394, 3.7976369640091434e-06, 5.4993921366985887e-05, 8.5541498265229166e-05, 5.8950499806087464e-06, 1.1533876076441629e-09, 6.7368324380367994e-05, 4.8849757149582729e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 48,-2,29, -4,-21,14, -127,-118,-68, 
  /* [1][1][][] */ 4,-4,-2, -23,2,-6, -3,-34,1, 
  /* [1][2][][] */ -5,15,-4, -8,4,-6, 36,-22,8, 
  /* [2][0][][] */ 30,-6,-4, 80,117,5, 37,-44,5, 
  /* [2][1][][] */ 10,12,2, 69,127,-24, 15,-9,-8, 
  /* [2][2][][] */ 55,-61,26, 82,-37,-14, 33,-54,16, 
  /* [3][0][][] */ 6,34,7, 32,93,23, 2,6,-3, 
  /* [3][1][][] */ 22,38,10, 68,127,29, -11,-17,6, 
  /* [3][2][][] */ 9,6,7, 26,25,9, -1,-2,6, 
  /* [4][0][][] */ 36,70,-11, 14,83,-9, -8,20,10, 
  /* [4][1][][] */ 39,84,45, 31,122,31, 41,64,-3, 
  /* [4][2][][] */ 50,76,33, 52,127,19, -12,33,31, 
  /* [5][0][][] */ 7,2,-120, -4,1,-104, -5,28,-28, 
  /* [5][1][][] */ 4,-43,-127, -2,-45,-113, -1,12,-21, 
  /* [5][2][][] */ -3,8,-18, 1,-3,-12, 1,12,-11, 
  /* [6][0][][] */ 22,-64,32, 45,-87,38, 9,-19,9, 
  /* [6][1][][] */ 34,-97,59, 61,-127,69, 7,-28,16, 
  /* [6][2][][] */ 19,-36,11, 12,-45,24, -14,6,-2, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 124,127,115, 123,127,114, 123,125,114, 
  /* [8][1][][] */ 124,126,114, 122,124,112, 123,124,112, 
  /* [8][2][][] */ 123,124,114, 122,125,113, 123,124,113, 
  /* [9][0][][] */ -30,-10,5, -22,-13,-4, 0,-3,-15, 
  /* [9][1][][] */ 98,121,-1, 70,127,21, -12,15,25, 
  /* [9][2][][] */ -29,-28,16, 1,-36,-3, 8,0,-24, 
  /* [10][0][][] */ -24,-83,-18, 34,95,20, -8,-13,-2, 
  /* [10][1][][] */ -58,-102,-14, 79,127,15, -16,-26,0, 
  /* [10][2][][] */ -31,-19,2, 37,23,-11, -8,0,7, 
  /* [11][0][][] */ -18,-31,-4, 5,-48,2, 9,-105,-55, 
  /* [11][1][][] */ -56,-51,-25, -45,-72,-44, -18,-64,-58, 
  /* [11][2][][] */ -13,-46,-86, 117,127,62, -44,10,-53, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-96,-17, -61,-110,-24, -10,-18,-6, 
  /* [13][1][][] */ 61,114,16, 58,127,25, 7,15,10, 
  /* [13][2][][] */ -8,-19,4, 1,-18,-1, -1,3,-4, 
  /* [14][0][][] */ 45,-6,-36, 78,-26,-49, 30,-11,-21, 
  /* [14][1][][] */ 89,-15,-70, 127,-37,-84, 55,-21,-38, 
  /* [14][2][][] */ 57,-6,-41, 75,-18,-48, 22,-9,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.040857095271348953, 0.042719621211290359, 0.0087189637124538422, 0.0024827183224260807, 0.041265882551670074, 0.024953771382570267, 0.064145356416702271, 0.00096839736215770245, 0.014023449271917343, 0.021813081577420235, 0.0015032376395538449, 2.9411381774480105e-07, 0.017178921028971672, 0.012456687167286873, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.46139228343963623, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.38163751363754272, } };
const TfArray<1, int> quant50_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.58637118339538574, } };
const TfArray<1, int> quant53_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.55962258577346802, } };
const TfArray<1, int> quant54_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.33306640386581421, } };
const TfArray<1, int> quant58_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22960063815116882, } };
const TfArray<1, int> quant61_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.34865650534629822, } };
const TfArray<1, int> quant62_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.20426569879055023, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.43689602613449097, } };
const TfArray<1, int> quant66_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.068220682442188263, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.067413479089736938, } };
const TfArray<1, int> quant69_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
